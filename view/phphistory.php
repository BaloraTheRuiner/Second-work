<?php include "session.php" ?>
<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<title>PHP</title>
	<link rel="stylesheet" href="../css/style.css">
</head>
<body>

	<div class="up_arrow"><img src="../image/up-arrow-purple.png" alt="" width="50"></div>

	<div class="content">
		<div class="inner_content">
			<div class="php_mysql_glxavor">
				<?php include "phptegs.php"; ?>
				<div class="php_mysql_glxavor_aj php_glxavor_purple">
					<br>
					<h2>PHP ծրագրավորման լեզվի ուղեցույց</h2>
					<br>
					<p>PHP-ն (Hypertext Preprocessor) ընդհանուր նշանակության սկրիպտային ծրագրավորման լեզու է, որն ինտենսիվորեն օգտագործվում է վեբ ծրագրավորման մեջ։ Ներկայումս այն աջակցվում է հոսթինգ տրամադրող ընկերությունների ճնշող մեծամասնության կողմից և հանդիսանում է առաջատար ծրագրավորման լեզուներից մեկը, որոնք կիրառվում են դինամիկ վեբ-կայքերի ստեղծման համար:</p>
					<br>
					<h2>Բովանդակություն</h2>
					<ol class="php_mysql_content taki_gic">
						<li class="parunakutyun" value="1">Ի՞նչ Է PHP-ն</li>
						<li class="parunakutyun" value="2">Փոփոխականներ</li>
						<li class="parunakutyun" value="3">Գործողություններ PHP-ում</li>
						<li class="parunakutyun" value="4">Հաստատուններ</li>
						<li class="parunakutyun" value="5">Պայամանական օպերատորներ</li>
						<li class="parunakutyun" value="6">Ցիկլային օպերատորներ</li>
						<li class="parunakutyun" value="7">Զանգված</li>
						<li class="parunakutyun" value="8">Ֆունկցիա</li>
					</ol>

					<h2 class="title1">Ի՞նչ Է PHP-ն</h2>
					<br>

					<h4>PHP-ի համառոտ պատմություն</h4>
					<br>
					<p>PHP լեզուն ի հայտ եկավ 1998 թ.-ին` որպես աշխատանքի ավելի հարմար միջոց ինտերնետում, քան Perl լեզուն: PHP-ի առաջին երկու տարբերակները պատրաստվել են Perl-ով: </p>
					<p>PHP-ի ավելի ժամանակակից տարբերակները, ներառյալ 5 և ավելի նոր տարբերակները (հիմնված Zend Engine 2-ի վրա) կառուցված են C-ի վրա։</p>
					<p>Այս պահին PHP լեզուն ակտիվորեն զարգանում է, հասել է  իր 7-րդ սերնդին (պայմանականորեն, քանի որ PHP-ի 6-րդ սերունդը լույս չի տեսել) ու ունի ծրագրավորողների լավ զարգացած համայնք:</p>
					<p>Այս պահին PHP-ում ստեղծված խոշոր նախագծերից կարող ենք նշել այնպիսի սոցիալական ցանցեր, ինչպիսիք են Facebook-ը և VK-ն, TED ծառայությունները, YouTube-ը, BlaBlaCar-ը և էլեկտրոնային Wikipedia հանրագիտարանը:</p>
					<p>Բացի այդ, լայն տարածված CMS-ները, օրինակ WordPress-ը, գրված են PHP-ով և ակտիվորեն օգտագործվում են դրանում:</p>
					<br>

					<h4>Այսպիսով, ի՞նչ է իրականում PHP-ն:</h4>
					<br>
					<p>PHP անունը վերծանվում է, ինչպես Hypertext Preprocessor։ Չնայած PHP-ի սկզբնական անունը Personal Home Page Tools է (Անհատական ​​վեբ էջեր ստեղծելու գործիքներ):</p>
					<p>Այն սցենարների լեզու է, որն ակտիվորեն օգտագործվում է վեբ կայքերի մշակման մեջ և ունի բազմաթիվ ընդլայնումներ և հնարավորություններ: «Սցենար» հասկացությունը ենթադրում է, որ 
					սկրիպտերի (ծրագրերի) թողարկման ժամանակ, որորնք գրված են PHP լեզվով, պետք է օգտագործել հատուկ միջոցներ՝ թարգմանիչներ, ստացողներ, վերլուծություններ և այլն սցենարներ, որոնք կատարում է տեքստային կոդը:</p>
					Հատկություններից կարելի է առանձնացնել հետևյալը.
					<p>- ցածր արագություն՝ համեմատած համակցված լեզուների հետ</p>
					<p>- ցածր կոդի որակ՝ համեմատած խիստ տեսակավորված լեզուների հետ, որոնք, երբեմն դա մեծապես բարդացնում է ծրագրավորողների փոխգործակցությունը</p>
					<p>PHP-ի ամենակարևոր առավելությունը մուտքի ցածր շեմն է և թույլ է տալիս նորեկների մեծ մասին գրեթե առանց խնդիրների հետաքրքիր և հզոր նախագծեր մշակել:</p>
					<br>

					<h2 class="title2">Փոփոխականներ</h2>
					<br>
					<p>Ինչպես և շատ այլ ծրագրավորման լեզուներ, PHP-ն ունի փոփոխական հասկացություն` անվանված հատկացված հիշողության տարածք, որը պարունակում է տրված տեսակ և արժեք: PHP-ում փոփոխականները հաճախ և շատ են օգտագործվում, ուստի նրանց քանակը չի սահմանափակվում:</p>
					<p>PHP-ում փոփոխականները հայտարարվում են հետևյալ կերպ․ Փոփոխականի անվան դիմաց դրվում է դոլարի նշան ($)</p>			
					<ol class="php_mysql_content">
						<li>$variable;</li>
						<li>$New_variable;</li>
						<li>$NEW_VARIABLE;</li>
					</ol>
					<p>Այստեղ սահմանված է $variable; փոփոխականը: Քանի որ փոփոխականի սահմանումը առանձին հայտարարում է, այն ավարտվում է կետանիշով (;): Սովորաբար փոփոխականի անվանունները սկսվում են փոքրատառով կամ (_) սիմվոլով: Պետք է հիշել, որ PHP-ն տառատեսակորեն զգայուն լեզու է, ուստի $variable և $Variable փոփոխականները տարբերվում են:</p>
					<p>Բացի այդ, փոփոխականները անվանելիս պետք է հաշվի առնել հետևյալ կանոնները.</p>
					<ol class="php_mysql_content">
						<li>Փոփոխականների անունները պետք է սկսվեն տառերով կամ (_) նշանով։</li>
						<li>Փոփոխական անունները կարող են պարունակել միայն նիշեր. a - z, A - Z, 0–9 և (_) նշանով։</li>
						<li>Փոփոխական անունները չպետք է պարունակեն բացատներ։</li>					
					</ol>
					<p>(=) օպերատորի օգնությամբ փոփխականին վերագրում ենք արժեք։</p>
					<p class="span_left span_left_purple">
						&lt;?php
						<span>$num = 10;</span>
						<span class="last_span">?&gt;</span>
					</p>
					<p>Այստեղ սահմանվում է փոփոխական, $num որը պահում է 10 թիվը:</p>
					<br>

					<h4>Փոփոխականի տեսակներ.</h4>
					<ol class="php_mysql_content">
						<li>integer</li>
						<li>double</li>
						<li>string</li>
						<li>array</li>
						<li>object</li>
						<li>resource</li>
						<li>boolean</li>
						<li>null</li>
						<li>callable</li>
					</ol>
					<br>

					<h4>Մեկնաբանում</h4>
					<br>
					<p>Վեբ կայք ստեղծելիս մենք կարող ենք օգտագործել մեկնաբանություններ: Օրինակ, մենք կարող ենք մեկնաբանել գործողությունը, որպեսզի հետագայում պատկերացում կազմենք այն մասին, թե ինչ է անում տվյալ կոդը։</p>
					<p class="span_left span_left_purple">
						&lt;?php
						<span>echo "&lt;p>Ողջույն աշխարհ!&lt;/p>"; // հաղորդագրության թողարկում</span>
						<span>// echo "Ցտեսթյուն աշխարհ";</span>
						<span class="last_span">?&gt;</span>	
					</p>
					<p>// նշանից հետո գրված տողը կհամարվի մեկնաբանված և չի կատարվի ինտերպրիտատորի կողմից։ Գործարկման ընթացքում ինտերպրիտատորը պարզապես բաց կթողնի մեկնաբանությունները:</p>
					<p>Եթե ​​մենք պետք է մեկնաբանենք մի քանի տող, ապա կարող ենք օգտագործել բազմաշերտ մեկնաբանություն /* տեքստի մեկնաբանում */.</p>
					<p class="span_left span_left_purple">
						&lt;?php
							<span>echo "&lt;p>Ողջույն աշխարհ!&lt;/p>"; // հաղորդագրության թողարկում</span>
							<span>/*</span>
							<span>բազմաշերտ մեկնաբանություն</span>
							<span>մաթեմատիկական արտահայտության արդյունքի թողարկումը</span>
							<span>echo "2 + 2 = " . (2+2);</span>
							<span>*/</span>
						<span class="last_span">?&gt;</span>
					</p>
					<p>Մեկնաբանության բոլոր տողերը նույնպես չեն գործարկվի ինտերպրիտատորի կողմից:</p>

					<br>
					<h2 class="title3">Գործողություններ PHP-ում</h2>
					<br>
					<p>PHP-ում կարող ենք օգտագործել տարբեր օպերատորներ ՝ թվաբանական, տրամաբանական և այլն:</p>
					<p><b>Թվաբանական գործողություններ</b></p>
					<ol class="php_mysql_content">
						<li> + (գումարման գործողություն)</li>
						<li> - (հանման գործողություն)</li>
						<li> * (բազմապատկում)</li>
						<li> / (բաժանում)</li>
						<li> % (մնացորդ)</li>
						<li> ** (աստիճանի բարձրացում)</li>				
				    </ol>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = 8 + 2; // 10, գումարում</span>
						<span>$a = 8 - 2; // 6, հանում</span>
						<span>$a = 8 * 2; // 16, բազմապատկում</span>
						<span>$a = 8 / 2; // 4, բաժանում</span>
						<span>$a = 8 % 2; // 0, մնացորդ</span>
						<span>$a = 8 ** 2; // 64, աստիճանի բարձրացում</span>
						<span class="last_span">?&gt;</span>
				    </p>
				    <p>Ինքրիմենտ և դեքրիմենտ</p>
				    <p>Պետք է առաձնացնել Ինքրիմենտ և դեքրիմենտ օպերացիաները, որոնք նույնպես թվաբանական գործողություններ են, բայց կատարվում են մեկ օպերանդի վրա: </p>
				    <p>Ինքրիմենտ - ++ գործողությունը թիվը ավելացնում է մեկով:</p>
				    <p>Գոյություն ունեն Ինքրիմենտի երկու տեսակ՝ պրեֆիկսային (++$a) և պոստֆիկսայի ($a++)։ Կարևոր է հասկանալ տարբերությունը այդ գործողությունների միջև:
				    </p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = 12;</span>
						<span>$b = ++$a; // $b հավասար է 13</span>
						<span>echo "a = $a   b = $b";</span>
						<span class="last_span">?&gt;</span>
				    </p>
				    <p>Արդյուքն.</p>
				    <p class="span_left span_left_purple">
				    	a = 13 b = 13
				    </p>
				    <p>Այստեղ նախ մեկը ավելացվում է $a փոփոխականի արժեքին, այնուհետև դրա արժեքը հավասարեցվում է $b փոփոխականին:</p>
				    <p>Այժմ տեսնենք, թե ինչ է տեղի ունենում պոստֆիկսայինի ավելացման դեպքում.</p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = 12;</span>
						<span>$b = $a++; // $b հավասար է 12</span>
						<span>echo "a = $a   b = $b";</span>
						<span class="last_span">?&gt;</span>
				    </p>
				    <p>Արդյունք.</p>
				    <p class="span_left span_left_purple">
				    	a = 13 b = 12
				    </p>
				    <p>Այստեղ նախ $a փոփոխականի արժեքը փոխանցվում է $b փոփոխականին, այնուհետև $a փոփոխականը ավելացնում է իր արժեքը։</p>
				    <p>Դեքրիմենտը ունի երկու տեսակ՝ պրեֆիկսային (--$a) և պոստֆիկսայի ($a--)։ Աշխատում է նույն ձև ինչպես ինքրիմենտը, սակայն ավելացնելու փոխարեն նվազեցնում է մեկ նիշով։
				    </p>

				    <br>
				    <h4>Տողերի միացում</h4>
				    <br>
				    <p>Տողերի միացման համար օգտագործվում է (.) օպերատորը։ Օրինակ՝ միացնենք մի քանի տող.</p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a="Ողջույն, ";</span>
						<span>$b=" աշխարհ";</span>
						<span>echo $a . " " . $b . "!";   // Ողջույն աշխարհ!</span>
						<span class="last_span">?&gt;</span>
				    </p>
				    <p>Եթե փոփոխականը տող չէ, այլ ուրշ տիպ է, օրինակ՝ թիվ, այդ դեպքում արժեքը փոփոխվում է տողի և աշխատում է միացման օպերատորը։ </p>

				    <br>
				    <h4>Համեմատության օպերատորներ</h4>
				    <br>
				    <p>Համեմատության գործողությունները սովորաբար օգտագործվում են պայմանական կոնստրուկցիաներում, երբ անհրաժեշտ է համեմատել երկու արժեքներ և, կախված համեմատության արդյունքից, կատարել որոշ գործողություններ:Գօյություն ունեն հետևյալ համամեատության օպերատորները։</p>
				    <ol class="php_mysql_content">
				    	<li><b>==</b><br>Հավասարության օպերատորը համեմատում է երկու արժեք, և եթե դրանք հավասար են, ապա այն վերադառնում է true, հակառակ դեպքում՝ վերադարձնում է` false: $a == 5</li>
				    	<li><b>===</b><br>Նույնության օպերատորը նույնպես համեմատում է երկու արժեք, և եթե դրանք հավասար են, ապա այն վերադառնում է true, հակառակ դեպքում՝ false : $a === 5</li>
				    	<li><b>!=</b><br>Համեմատում է երկու արժեք, և եթե դրանք հավասար չեն, ապա վերադարձնում է true, հակառակ դեպքում՝ false:$a != 5</li>
				    	<li><b>!==</b><br>Համեմատում է երկու արժեք, և եթե դրանք հավասար չեն, ապա վերադարձնում է true, հակառակ դեպքում՝ false:$a !== 5</li>
				    	<li><b>></b><br>Համեմատում է երկու արժեք, և եթե առաջինն ավելի մեծ է, քան երկրորդը, ապա այն վերադառնում է true, հակառակ դեպքում վերադարձնում է` false: $a>5</li>
				    	<li><b><</b><br>Համեմատում է երկու արժեք, և եթե առաջինը երկրորդից փոքր է, ապա այն վերադառնում է true, հակառակ դեպքում՝ false: $a<5</li>
				    	<li><b>>=</b><br>Համեմատում է երկու արժեք, և եթե առաջինը մեծ է կամ հավասար է երկրորդին, ապա այն վերադառնում է true, հակառակ դեպքում կվերադառնա` false: $a >= 5</li>
				    	<li><b><=</b><br>Համեմատում է երկու արժեք, և եթե առաջինը երկրորդից փոքր է կամ հավասար է, ապա այն վերադառնում է true, հակառակ դեպքում՝ false: $a <= 5</li>
				    </ol>

				    <h4>Հավասարության և նմանության օպերատորներ</h4>
				    <br>
				    <p>Երկու օպերատորներն էլ համեմատում են երկու արտահայտություն և վերադառնում են true, եթե արտահայտությունները հավասար են: Բայց նրանց միջև կան տարբերություններ: Եթե ​​հավասարության գործողության մեջ տարբեր տեսակի երկու արժեք է ընդունվում, ապա երկուսն էլ բերվում են այն տիպի, որը որ ինտերպրիտատորը ավելի օպտիմալ կգտնի։ Օրինակ՝</p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = (2 == "2");  // true (արժեքները հավասար են)</span>
						<span>$b = (2 === "2"); // false (արժեքները տարբեր տիպերի են պատկանում)</span>
						<span class="last_span">?&gt;</span>
				    </p>
				    <p>2-րդ տողը ըստ էության ներկայացնում է նույն արժեքը, ինչ 2 թիվը, համեմատության օպերատորը կվերադառնա true: Այնուամենայնիվ, դրանք ներկայացնում են տարբեր տեսակներ, ուստի նույնականացման օպերատորը կվերադառնա false։</p>
				    <p>Անհավասարության օպերատորները != և գործում են նույն կերպ !==:</p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = (2 != "2");  // false, քանի որ արժեքները հավասար են</span>
						<span>$b = (2 !== "2"); // true, քանի որ արժեքները տարբեր տիպերի են պատկանում</span>
				    	<span class="last_span">?&gt;</span>
				    </p>

				    <br>
				    <h4>Օպերատոր <=></h4>
				    <br>
				    <p>Առանձնահատուկ պետք է անրադառնալ օպերատոր <=>-ին։ Նա նույնպես համեմատում է երկու արժեք և վերդարձնում է՝</p>
				    <ol class="php_mysql_content">
				    	<li>0, եթե երկու արժեքներն էլ հավասար են</li>
				    	<li>1, եթե ձախի արժեքը ավելի մեծ է, քան աջի արժեքը</li>
				    	<li>–1, եթե ձախ կողմի արժեքը փոքր է աջից</li>
				    </ol>				    
				    <p>Օրինակ․</p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = 2 <=> 2;     // 0    (համարժեք է 2 == 2)</span>
						<span>$b = 3 <=> 2;     // 1    (համարժեք է 3 > 2)</span>
						<span>$c = 1 <=> 2;     // -1   (համարժեք է 1 < 2)</span>
						<span>echo "a=$a   b=$b   c=$c";  // a=0  b=1  c=-1</span>
						<span class="last_span">?&gt;</span> 
				    </p>	

				    <br>
				    <h4>Տրամաբանական օպերատորներ</h4>
				    <br>
				    <p>Տրամաբանակա օպերատորները սովորաբար օգտագործվում են երկու համեմատական ​​օպերատորների արդյունքները միացնելու համար։Օրինակ, պետք է որոշակի գործողություն կատարել, եթե իրական են մի քանի արժեքներ։</p>
				    <ol class="php_mysql_content">
				    	<li><b>&&</b><br>Վերադարձնում է true, եթե երկու համեմատության գործողություններն էլ վերադառնան true, հակառակ դեպքում վերադարձնում է false: $a && $b</li>
				    	<li><b>and</b><br>համապատասխանում է օպերատոր &&:$a and $b</li>
				    	<li><b>||</b><br>Վերադարձնում է true, եթե գոնե մեկ համեմատության գործողություն ճիշտ է վերադառնում, հակառակ դեպքում ՝ false վերադառնում: $a || $b</li>
				    	<li><b>or</b><br>համապատասխանում է օպերատոր ||: $a or $b</li>
				    	<li><b>!</b><br>Վերադարձնում է true, եթե համեմատության գործողությունը սխալ է վերադառնում։ !$a</li>
				    	<li><b>xor</b><br>Վերադառնում է true, եթե արժեքներից միայն մեկն է ճիշտ: Եթե ​​երկուսն էլ true են, կամ մեկը հավասր չէ true,, կվերադառնա false։ $a xor $b</li>
				    </ol>
				    <p>Տրամաբանական օպերատորների օրինակներ.</p>
				    <p class="span_left span_left_purple">
				    	&lt;?php
				    	<span>$a = (true && false); // false</span>
						<span>// համապատասխանաբար</span>
						<span>$a = (true and false); // false</span>
						<span>$b = (true || false); // true</span>
						<span>// համապատասխանում է հաջորդ օպերատորին</span>
						<span>$b = (true or false); // true</span>
						<span>$c = !true; // false</span>
				    	<span class="last_span">?&gt;</span>
				    </p>
				    <p>Առանձին օրինակ xor օպերատորով․</p>
				    <p class="span_left span_left_purple">
				   		&lt;?php
					    <span>$a = (true xor true);   //  false</span>
						<span>$b = (false xor true);  //  true</span>
						<span>$c = (false xor false); //  false</span>
						<span class="last_span">?&gt;</span>
					</p>

					<br>
					<h4>Վերագրման օպերատորներ</h4>
					<ol class="php_mysql_content">
						<li><b>=</b><br>Փոփոխականին վերագրում է արժեք</li>
						<li><b>+=</b><br>Գումարում, որին հաջորդում է արդյունքի վերագրումը</li>
						<li><b>-=</b><br>Հանում, որին հաջորդում է արդյունքի վերագրումը</li>
						<li><b>*=</b><br>Բազմապատկում, որին հաջորդում է արդյունքի վերագրումը</li>
						<li><b>/=</b><br>Բաժանում,  որին հաջորդում է արդյունքի վերագրումը</li>
						<li><b>.=</b><br>Տողերի միացում, որին հաջորդում է արդյունքի վերագրումը: Կիրառվում է երկու տողի վրա: Եթե ​​փոփոխականները տողեր չեն պահում, այլ օրինակ թվեր, ապա դրանց արժեքները վերափոխվում են տողերի և կատարվում է միավորումը</li>
						<li><b>%=</b><br>Մնացորդի ստացում, որին հաջորդում է արդյունքի վերագրումը</li>
						<li><b>**=</b><br>Աստիճանի բարձրացման ստացում, որին հաջորդում է արդյունքի վերագրումը</li>
					</ol>

				    <br>
					<h2 class="title4">Հաստատուններ</h2>
					<br>
					<p>Պատահում է, որ ծրագիր մշակելիս անհրաժեշտ է դառնում հայտարարել մի արժեք, որը չի փոխի դրա արժեքը ամբողջ աշխատանքի ընթացքում: Դրանք կարող են լինել որոշ արժեքներ, ֆայլերի կամ տվյալների բազաների միացման ուղիներ, գաղտնաբառեր և այլն: Այս նպատակների համար տրամադրվում է հաստատունների օգտագործում `հատուկ լեզվական կառուցվածքներ, որոնց նշանակվում է հաստատուն արժեք:</p>
					<p>Կոնստանտները բաժանվում են երկու տիպի՝ նախորոշված ​​հաստատուններ և ծրագրի կոդի տեքստում հայտարարված հաստատուններ:</p>
					<br>

					<h4>Նախորոշված ​​հաստատուններ</h4>
					<br>
					<p>PHP- ում առանձնանում են մի շարք նախորոշված ​​հաստատուններ, որոնց թվում կարելի է առանձնացնել հետևյալը.</p>
					<ol class="php_mysql_content">
						<li>__FILE__ պահում է ֆայլի անունը, որը պարունակում է ներկա պահին օգտագործված ծրագրի ծածկագիրը:</li>
						<li>__LINE__ պահպանում է ներկա պահին կատարվող ծածկագրի տողի համարը:</li>
						<li>__FUNCTION__ Ներկա պահին օգտագործվող ֆունկցիայի անունը:</li>
						<li>__CLASS__ Ներկա պահին օգտագործվող կլասի անվանումը (OOP- ի համար) Հարկ է նշել, որ __CLASS__, __FUNCTION__, __LINE__, ինչպես նաև __FILE__ հաստատունները պարբերաբար վերասահմանվում են ՝ կախված սկրիպտի գործողության ընթացիկ պահից:</li>
						<li>PHP_VERSION PHP թարգմանչի ներկայիս տարբերակը:</li>
						<li>TRUE (անալոգային - TRUE) «ճշմարիտ» արժեք պարունակող հաստատուն:</li>
						<li>FALSE (անալոգային - FALSE) Հակառակ ճշտին, արժեքը՝ «կեղծ»:</li>
						<li>NULL (անալոգային - NULL) «null» արժեք:</li>
					</ol>
					<h4>Հաստատուն սահմանելը</h4>
					<br>
					<p>PHP-ում հաստատունը որոշվում է՝ օգտագործելով define () կոնստրուկցիան:</p>
					<p class="span_left span_left_purple">Syntaxis: void define(string $name, string $value);</p>
					<br>

					<h2 class="title5">Պայամանական օպերատորներ</h2>
					<br>
					<p>PHP լեզուն պարունակում է մի շարք օգտակար կառուցվածքներ, որոնք թույլ են տալիս լուծել շատ խնդիրներ: Դրանցից մեկը if-else պայմանական օպերատորն է։</p>
					<p>Գրելաձև</p>
					<p class="span_left span_left_purple">
						if (պայման) {
						<span>հրահանգ 1;</span>
						<span>հրահանգ 2;</span>
						<span>…</span>
						<span>հրահանգ N;</span>
						<span class="last_span">} else {</span>
						<span>հրահանգ 1;</span>
						<span>հրահանգ 2;</span>
						<span>…</span>
						<span>հրահանգ N;</span>
						<span class="last_span">}</span>
					</p>
					<p>Այն իրավիճակում, երբ պայմանական օպերատորի ներսում կա միայն մեկ արտահայտություն պարզ արտահայտության տեսքով, կարող է օգտագործվել պարզ ձև.</p>	
					<p class="span_left span_left_purple">
						if (պայման)
						<span>հրահանգ 1;</span>
						<span class="last_span">else</span>
						<span>հրահանգ 1;</span>
					</p>
					<p>Գոյություն ունի լրացուցիչ երկու տեսք if-else <span>օգտագործման</span> համար։ if-ը գրվում է առանց else այն դեպքերում, երբ այլընտրանքային պայման չի պահանջում։ if-elseif-else լրիվ ձև է, որի դեպքում կարող են օգտագործվել անսահմանափակ թվով պայմաններ:</p>
					<p>Բացի պայմանական օպերատորից, PHP-ն ունի if-else կառուցվածքի անալոգ, որը նախատեսված է նախօրոք հայտնի պայմանները ընտրելու համար՝ switch-case:</p>
					<p class="span_left span_left_purple">
						switch (արտահայտություն) {
						<span>case պայման1:</span>
						<span><span>հրահանգ1;</span></span>
						<span><span>break;</span></span>
						<span>case պայման2:</span>
						<span><span>հրահանգ2;</span></span>
						<span><span>break;</span></span>
						<span>…</span>
						<span>case պայմանN:</span>
						<span><span>հրահանգN;</span></span>
						<span><span>break;</span></span>
						<span>default:</span>
						<span><span>կառուցվածք;</span></span>
						<span><span>break;</span></span>
						<span class="last_span">}</span>
					</p>
					<br>

					<h2 class="title6">Ցիկլային օպերատորներ</h2>
					<br>

					<br>
					<h4>Ցիկլ while</h4>
					<br>
					<p>Քանի դեռ արտահայտության արժեքը false չէ, հրամանը կատարվում է։ Այսինքն՝ հաշվվում է արտահայտության արժեքը, եթե այն false չէ, կատարվում է հրամանը, հետո նորից հաշվվում է արտահայտության արժեքը, եթե այն false չէ, կատարվում է հրամանը։ Այս ամենը կրկնվում է այնքան, մինչև արտահայտության արժեքը դառնա false: Ցիկլի յուրաքանչյուր քայլին արտահայտության մեջ ընդգրվկած փոփոխականների արժեքներից գոնե մեկը պետք է փոխվի, եթե ոչինչ չփոխվի, կստացվի անվերջ ցիկլ։</p>
					<p class="span_left span_left_purple">Syntaxis: while (<տրամաբանական արտահայտություններ>) {<հրահանգներ>;}</p>

					<br>
					<h4>Ցիկլ do while</h4>
					<br>
					<p>do while ցիկլին հաճախ անվանում են ետ-պայմանով ցիկլ, ի տարբերություն while ցիկլի, որը նախապայմանով է։ Այս դեպքում նախ կատարվում է do ծառայողական բառին հաջորդող հրամանը, ապա հաշվվում է while-ից հետո կլոր փակագծերում գրված արտահայտության արժեքը։</p>
					<p class="span_left span_left_purple">Syntaxis: do {<հրահանգներ>} while(<տրամաբանական արտահայտություն>);</p>
					
					<br>
					<h4>Ցիկլ for</h4>
					<br>
					<p class="span_left span_left_purple">Syntaxis: for (<պարամետրերի սկզբնարժեքավորում>;<վերջնական արժեքների ստուգման պայմաններ>;<պարամետրերի աճում կամ նվազում >){<հրահանգներ>;}</p> 
					<p>Եթե <պայման>-ը բաց է թողնված, ապա այն համարվում է ճշգրիտ և սկսվում է անվերջ կատարվել ցիկլի մարմինը, որը կարելի կանգնեցնել միայն break, goto կամ return հրահանգների միջոցով.</p>
					<p>օր. for (i=0; ; i++) ; //հավերժական ցիկլի օրինակ</p>

					<br>
					<h4>Ցիկլ foreach</h4>
					<br>
					<p>Foreach-ը աշխատում է միայն զանգվածների և օբյեկտների հետ, այլ տեսակ փոփոխականների օգտագործման դեպքում առաջացնում է սխալ։ </p>
					<p class="span_left span_left_purple">
						Syntaxis։
						<span class="last_span">foreach (iterable_expression as $value)</span>
				    	<span>արտահայտություն </span>
						<span class="last_span">foreach (iterable_expression as $key => $value) </span>
				    	<span>արտահայտություն </span>
				    </p>

				    <br>
				    <h2 class="title7">Զանգվածներ</h2>
				    <br>
				    <p>Զանգվածները դրանք կարգավորված տվյալների հավաքածու են, որը իրենից ներկայացնում է միատիպ տարրերի ցանկ։ </p>
					<p>Գոյություն ունեն երկու տեսակի զանգվածներ, որոնք իրենցից տարբերվում են տարրերի նույնականացման եղանակից:</p>
					<p>1. Առաջին տիպի զանգվածներում տարրը որոշվում է հաջորդականության ցուցիչով: Նման զանգվածները կոչվում են պարզ զանգվածներ:</p>
					<p>2. Երկրորդ տեսակի զանգվածները ասոցիատիվ բնույթի են, և տարրերին դիմելու համար օգտագործվում են բանալիներ, որոնք տրամաբանորեն կապված են արժեքների հետ: Նման զանգվածները կոչվում են ասոցիատիվ զանգվածներ:</p>

					<br>
					<h4>Պարզ զանգվածներ</h4>
					<br> 
					<p>Տարրին դիմելու ժամանակ պարզագույն ինդեքսավորված զանգվածում օգտագործվում է ամբողջաթիվ ինդեքս, որը որոշում է տրված տարրի դիրքը։</p>
					<p class="span_left span_left_purple">Syntaxis: $անուն[ինդեքս];</p>

				    <p>Պայմանականորեն, զանգվածը կարող է նշանակվել որպես կոնտեյներ-փոփոխական միանգամից մի քանի արժեք պահելու համար, որոնք կարող են արագ և հեշտությամբ հասանելի լինել: Սովորական միաչափ ասոցիատիվ զանգվածը փոփոխական է, որը պահպանում է տարրերի կառուցվածքային բազմություն: Յուրաքանչյուր տարր բաղկացած է տարրերի բանալուց (երբեմն կոչվում է նաև ինդեքս) և արժեքից: Միևնույն ժամանակ, տարրի բանալին կարող է պարունակել ինչպես թվային, այնպես էլ տողային արժեքներ, իսկ արժեքը կարող է պարունակել զանգվածներ:</p>
					
					<br>
					<h4>Ասոցիատիվ զանգվածներ</h4>
					<br>

				    <p>Պետք է նշել, որ PHP- ում բոլոր զանգվածները կարող են դասակարգվել, որպես ասոցիատիվ։</p>
				    <p>Ասոցիատիվ զանգվածները դասակարգվում են առանձին կատեգորիայի, որը կոչվում է նաև խեշ: Իրականում PHP-ում բոլոր զանգվածները ասոցիատիվ են, քանի որ ժամանակի ցանկացած պահի ցանկացած զանգված կարող է բաժանել  բանալի => արժեք զույգերի մեջ և փոխել ոչ միայն բուն արժեքը, այլև բանալին: Այսպիսով, ցանկացած պահի կարող եք փոխել ամբողջ բանալիները տողային բանալիների և հակառակը:</p>
					<p>Ասոցիատիվ զանգված ստեղծելու համար կարելի է օգտվել array() կառուցվածքից:</p>
					<p class="span_left span_left_purple">Syntaxis: $array = array(‘key1’ => ‘value1’, ‘key2’ => ‘value2’, …, ‘keyN’ => ‘valueN’);</p>

					<br>
					<h4>Բազմաչափ զանգվածներ</h4>
					<br>
					<p>Ենթադրենք, որ զանգվածի յուրաքանչյուր տարր նույնպես տարրերի զանգված է:</p>
					<p class="span_left span_left_purple">Syntaxis: $cars[‘VW’] = [‘Model’ => ‘Golf’, ‘Engine’ => ‘1.4 TSI’, ‘Body type’ => ‘5-doors hatchback’,
					‘Color’ => ‘Grey’];</p>
					<p>Նման զանգվածը, որում զանգվածները հանդես են գալիս որպես տարրեր, որոնք իրենց հերթին կարող են նաև զանգված լինել, կոչվում է երկչափ կամ բազմաչափ:</p>

				    <br>
				    <h2 class="title8">Ֆունկցիաներ</h2>
				    <br>
				    <p>PHP-ում լռելյայնորեն, բոլոր փոփոխականները, որոնք հայտարարված են ֆունկցիայի ներսում, դառնում են նրա համար լոկալ</p>
				    <p class="span_left span_left_purple">
				    	Syntaxis:
				    	<span class="last_span">function ֆունկցիայի_անուն(արգումենտ1[=նշանակություն1], …, արգումենտN[=նշանակությունN]) {</span>
						<span>ֆունկցիայի_մարմին;</span>
						<span>return արտահայտություն;</span>
						<span class="last_span">}</span>
					</p>
					<p>Սինտակսիսի նկարագրություն</p>
					<ol class="php_mysql_content">
						<li>function – հրաման, որը հայտարարում է ֆունկցիայի հայտարարման սկիզբը:</li>
						<li>ֆունկցիայի_անուն – անուն, որը պետք է օգտագործվի այս ֆունկցիակ կանչելիս: Պետք է նշել, որ ֆունկցիայի անունը տառատեսակ է և պետք է եզակի լինի արդեն հայտարարված անունների մեջ:</li>
						<li>արգումենտ1 – ֆունկցիայի արգումենտ, որը կարող է ունենալ ինչպես փոփոխականի, այնպես էլ արտահայտության ձև:</li>
						<li>[=նշանակություն1] – ոչ պարտադիր պարամետր, որը ցույց է տալիս արգումենտի լռելյայն արժեքը, եթե այն նշված չէ ֆունկցիան կանչելիս:</li>
						<li>ֆունկցիայի_մարմին – ցանկացած լեզվական կառուցվածք, ներառյալ փոփոխականները, ցիկլերը, պայմանները, արտահայտությունները և այլ բաներ, որոնք թույլատրվում են PHP-ում: Թույլատրվում է նաև ֆունկցիայի ներսում ֆունկցիա հայտարարել կամ կանչել այն, չնայած դա խորհուրդ չի տրվում:</li>
						<li>ոչ պարտադիր պարամետր return – պարամետր, որը վերադարձնում է ֆունկցիայի արդյունքը: Եթե ​​նշված չէ, ֆունկցիային վերագրվում է void տեսակ, և ֆունկցիան ոչինչ չի վերադարձնում, այլ միայն կատարում է այնտեղ տեղադրված խնդիրները:</li>
					</ol>

					<br>
					<h4>Լոկալ փոփոխականներ</h4>
					<br>
					<p>Տեղական փոփոխականն այն փոփոխականն է, որի կյանքի ժամկետը սահմանափակվում է այն կառուցվածքով, որի շրջանակներում հայտարարվում է: Այսպիսով, ֆունկցիայում հայտարարված $a փոփոխականը կհեռացվի հիշողությունից, երբ այս ֆունկցիայի կատարումն ավարտվի: Մեկ այլ հետաքրքիր կետ այն է, որ ֆունկցիայի մարմնից դուրս հայտարարված $a փոփոխականը և ֆունկցիայի մարմնի ներսում հայտարարված $a փոփոխականը լրիվ անկախ փոփոխականներ են:</p>

					<br>
					<h4>Ստատիկ փոփոխականներ</h4>
					<br>
					<p>Փոփախականները, որոնք պահպանում են իրենց արժեքը նույնիսկ ֆունկցիան կանչելուց հետո, կոչվում են ստատիկ։</p>
					<p class="span_left span_left_purple">
						Syntaxis: 
						<span class="last_span">function func_count($a) {</span>
						<span>static $count = 0;</span>
						<span class="last_span">}</span>
					</p>

					<br>
					<h4>Ռեկուրսիա և Անանուն ֆունկցիներ</h4>
					<br>
					<p>Ռեկուրսիա օգտագործելու ժամանակ հարկավոր է իմանալ մի քանի կարևորագույն պահեր:</p>
					<ol class="php_mysql_content">
						<li>Ռեկուրսիան կարող է փոխարինվել ստանդարտ for ցիկլի կառուցվածքով:</li>
						<li>Ռեկուրսիան օգտագործում է ավելի շատ հիշողության ռեսուրսներ, քան ցիկլային կառուցվածքը, ուստի խորհուրդ է տրվում օգտագործել այն միայն այն դեպքերում, երբ առանց դրա անհնարե:</li>
						<li>Ռեկուրսիվ ֆունկցիան ստեղծելիս անհրաժեշտ է հասկանալ դրա կառուցվածքը՝ անսահման ցիկլեր չստեղծելու համար:</li>
					</ol>
					<p class="span_left span_left_purple">
						Syntaxis: 
						<span class="last_span">function fact($n) {</span>
						<span>if($n <= 0) return 1;</span>
						<span>else return $n * fact($n - 1);</span>
						<span class="last_span">}</span>
					</p>
					<p>Անանուն ֆունկցիաները - դրանք ֆունկցիաներ են, որոնք չունեն անուն:</p>
					<p class="span_left span_left_purple">
						Syntaxis:
						<span class="last_span">$an_func = function(...$a) {</span>
						<span>արտահայտություն;</span>
						<span class="last_span">}</span>
					</p>

				</div>
			</div>
		</div>
	</div>


<?php include "footergicpurple.php"; ?>
<?php include "footer.php"; ?>