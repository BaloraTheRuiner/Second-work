-- phpMyAdmin SQL Dump
-- version 5.0.2
-- https://www.phpmyadmin.net/
--
-- Хост: 127.0.0.1
-- Время создания: Май 23 2021 г., 12:50
-- Версия сервера: 10.4.11-MariaDB
-- Версия PHP: 7.4.4

SET SQL_MODE = "NO_AUTO_VALUE_ON_ZERO";
START TRANSACTION;
SET time_zone = "+00:00";


/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8mb4 */;

--
-- База данных: `diplom`
--

-- --------------------------------------------------------

--
-- Структура таблицы `harcer`
--

CREATE TABLE `harcer` (
  `id` int(11) NOT NULL,
  `harc_php` text NOT NULL,
  `harc_mysql` text NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `harcer`
--

INSERT INTO `harcer` (`id`, `harc_php`, `harc_mysql`) VALUES
(1, 'Ընտրել նշանը, որով պետք է հայտարարել փոփոխականները․', 'Տվյալների բազան ստեղծելու համար օգտագործվում է ... հրամանը:'),
(2, 'PHP կոդը չենք կարող տեղադրել HTML փաստաթղթում', 'Ի՞նչ հրաման ենք օգտագործում աղյուսակի վերանվանման համար․'),
(3, 'Բոլոր PHP արտահայտությունները պետք է վերջանան․', 'PRIMARY KEY հատկանիշը թույլ է տալիս։'),
(4, 'Կոդի կատարման արդյունքում ինչ պատասխան կստանանք․    &lt;?php  $sport = \'soccer\';   $statement = \'He plays $sport\';   echo $statement;?&gt;', 'Ո՞րը տվյալների տիպ չէ․'),
(5, 'Որի՞ արդյունքում փոփոխականը կհայտարարվի 5․', 'Սիմվոլային տիպ  ....-ը ֆիքսված երկարությամբ տող է, որն ունի 1-ից 255 սիմվոլ։'),
(6, 'Ինչպիսի՞ օպերատոր է օգտագործվում էկրանին տպելու համար․', 'DAYOFMONTH(date) վերադարձնում է'),
(7, 'Ինչպե՞ս ստանալ POST հարցման տվյալները:', '․․․․․ ֆունկցիան սյունակում հաշվում է արժեքների գումարը:'),
(8, 'Նշված օպերատորներից, ո՞րն է պատկանում պայմանական խմբին․ ', 'Ամսաթիվի և ժամանակի համադրությունն է YYYY-MM-DD HH:MM:SS ձևաչափով 1000-01-01 00:00:00-ի և 9999-12-31 23:59:59-ի միջև, զբաղեցնում է 8 բայթ'),
(9, 'Ի՞նչ գործողություն է կատարում ** օպերատորը․', 'MySQL- ում տվյալների բազայում,որ հրամանն է օգտագործվում տվյալներ ավելացնելու համար․'),
(10, 'Ո՞ր նշանով են մեկնաբանում տողը․', 'CONCAT։ Միացնում է տողերը: Որպես պարամետր, այն ընդունում է 2 կամ ավելի տողեր, որոնք պետք է միացված լինեն:');

-- --------------------------------------------------------

--
-- Структура таблицы `mysql_function`
--

CREATE TABLE `mysql_function` (
  `id` int(11) NOT NULL,
  `func_name` varchar(25) NOT NULL,
  `func_bacatrutyun` text NOT NULL,
  `func_orinak` text NOT NULL,
  `func_guyn` varchar(11) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `mysql_function`
--

INSERT INTO `mysql_function` (`id`, `func_name`, `func_bacatrutyun`, `func_orinak`, `func_guyn`) VALUES
(1, 'INSERT', '<p>MySQL- ում տվյալների բազայում տվյալներ ավելացնելու համար օգտագործվում է INSERT հրամանը, որն ունի հետևյալ շարահյուսությունը.</p>\r\n\r\n<p class=\"span_left span_left_green\">INSERT [INTO] աղյուսակի_անվանում [(սյունակների_ցուցակ)] VALUES (արժեք1, արժեք2, ... արժեքN);</p>\r\n\r\n<p>Փակագծերում INSERT INTO արտահայտությունից հետո կարող եք նշել ստորակետերով բաժանված սյունակների ցանկ, որոնցում պետք է տվյալներ ավելացնել, իսկ վերջում ՝ VALUES բառից հետո, սյունակների համար ավելացված արժեքները նշվում են փակագծերում: Օգտագործելով DEFAULT և NULL բանալիային բառերը, կարող եք նշել, որ որպես արժեք, համապատասխանաբար, կօգտագործվեն լռելյայն արժեքը կամ NULL:</p>\r\n\r\n<p class=\"span_left span_left_green\">INSERT INTO Products(ProductName, Manufacturer, Price, ProductCount) VALUES (\'Nokia 9\', \'HDM Global\', 41000, DEFAULT);\r\n</p>\r\n\r\n<p>կամ</p>\r\n\r\n<p class=\"span_left span_left_green\">INSERT INTO Products(ProductName, Manufacturer, Price, ProductCount) VALUES (\'Nokia 9\', \'HDM Global\', 41000, NULL);</p>\r\n\r\n\r\n<p><b>Բազմաթիվ ավելացումներ</b></p>\r\n\r\n<p>Կարող ենք նաև միանգամից ավելացնել մի քանի տող.</p>\r\n\r\n<p class=\"span_left span_left_green\">\r\n	INSERT INTO Products(ProductName, Manufacturer, Price, ProductCount)\r\n	<span class=\"last_span\">VALUES</span>\r\n	<span class=\"last_span\">(\'iPhone 8\', \'Apple\', 51000, 3),</span>\r\n	<span class=\"last_span\">(\'P20 Lite\', \'Huawei\', 34000, 4),</span>\r\n	<span class=\"last_span\">(\'Galaxy S8\', \'Samsung\', 46000, 2);</span>\r\n</p>\r\n<p>Այս դեպքում աղյուսակում ավելացվելու է երեք տող:</p>', '<p>Ենթադրենք, որ productsdb տվյալների բազան ունի հետևյալ Products աղյուսակը.</p>\r\n<p class=\"span_left span_left_green\">\r\n	CREATE DATABASE productsdb;\r\n	<span class=\"last_span\">USE productsdb;</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">\r\n	CREATE TABLE Products\r\n	(\r\n	<span>Id INT AUTO_INCREMENT PRIMARY KEY,</span>\r\n	<span>ProductName VARCHAR(30) NOT NULL,</span>\r\n	<span>Manufacturer VARCHAR(20) NOT NULL,</span>\r\n	<span>ProductCount INT DEFAULT 0,</span>\r\n	<span>Price DECIMAL NOT NULL</span>\r\n	<span class=\"last_span\">);</span>\r\n</p>\r\n\r\n<p>Ավելացնենք տվյալ աղյուսակին տող հետևյալ կոդի օգնությամբ.</p>\r\n<p class=\"span_left span_left_green\">\r\n	INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price) VALUES (\'iPhone X\', \'Apple\', 5, 76000);\r\n</p>\r\n<p>Այս դեպքում արժեքները սյուններին կփոխանցվեն ըստ դիրքի: Այսինքն ՝ ProductName սյունը ստանում է «iPhone X» տողը, Manufacturer սյունը ՝ «Apple» տողը, և այլն:</p>', '#018174'),
(2, 'SELECT', '<p>MySQL-ում տվյալների բազայից տվյալներ ընտրելու համար օգտագործվում է SELECT հրամանը: Պարզեցված ձևով այն ունի հետևյալ շարահյուսությունը.</p>\r\n\r\n<p class=\"span_left span_left_green\">SELECT սյունակների_ցուցակ FROM աղյուսակների_անվանում</p>\r\n\r\n<p>Աստղանիշը * ցույց է տալիս, որ մենք ուզում ենք ստանալ բոլոր սյունակները:</p>\r\n<br>\r\n<p class=\"span_left span_left_green\">\r\nSELECT * FROM Products;\r\n<span class=\"last_span\"><img src=\"../image/111.png\"></span>\r\n</p>\r\n\r\n<P>Հարկ է նշել, որ տվյալներ ստանալու համար աստղանիշ * օգտագործելը չի ​​համարվում լավ պրակտիկա, քանի որ սովորաբար պետք է տվյալներ վերցնել սյունակների փոքր հավաքածուի վրա: Հետևաբար, ավելի լավ մոտեցում է ընտրել բոլոր պահանջվող սյունակները SELECT բառից հետո: Բացառություն է այն դեպքը, երբ անհրաժեշտ է տվյալներ ստանալ աղյուսակի բացարձակապես բոլոր սյունակների վերաբերյալ: Բացի այդ, * սիմվոլի օգտագործումը կարող է նախընտրելի լինել, երբ սյունակների անունները հայտնի չեն:</P>\r\n\r\n<p>Եթե հարկավոր է տվյալներ ստանալ ոչ թե ամբողջ բազայից, այլ որոշ հատուկ սյունակներից, ապա սյունակների բնութագրերը ցուցակագրվում են առանձնացված՝ ստորակետերով SELECT-ից հետո.</p>\r\n\r\n<p class=\"span_left span_left_green\">SELECT ProductName, Price FROM Products;\r\n<span class=\"last_span\"><img src=\"../image/222.png\"></span></p>\r\n', '<p>Օրինակ, ավելի վաղ ստեղծվել է Products աղյուսակը և դրան ավելացվրել է որոշ նախնական տվյալներ.</p>\r\n<p class=\"span_left span_left_green\">\r\nCREATE TABLE Products(\r\n    <span>Id INT AUTO_INCREMENT PRIMARY KEY,</span>\r\n    <span>ProductName VARCHAR(30) NOT NULL,</span>\r\n    <span>Manufacturer VARCHAR(20) NOT NULL,</span>\r\n    <span>ProductCount INT DEFAULT 0,</span>\r\n    <span>Price DECIMAL</span>\r\n<span class=\"last_span\">);</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">\r\n<span class=\"last_span\">INSERT INTO Products (ProductName, Manufacturer, ProductCount, Price)</span>\r\n<span class=\"last_span\">VALUES</span>\r\n<span class=\"last_span\">(\'iPhone X\', \'Apple\', 3, 76000),</span>\r\n<span class=\"last_span\">(\'iPhone 8\', \'Apple\', 2, 51000),</span>\r\n<span class=\"last_span\">(\'Galaxy S9\', \'Samsung\', 2, 56000),</span>\r\n<span class=\"last_span\">(\'Galaxy S8\', \'Samsung\', 1, 41000),</span>\r\n<span class=\"last_span\">(\'P20 Pro\', \'Huawei\', 5, 36000);</span>\r\n</p>\r\n<p>Ստանում ենք բոլոր օբյեկտները աղյուսակից.</p>\r\n\r\n<p class=\"span_left span_left_green\">\r\nSELECT * FROM Products;', '#018174'),
(3, 'WHERE', '<p>Հաճախ անհրաժեշտ է տվյալների բազայից վերցնել ոչ բոլոր տվյալները, այլ միայն որոշակի պայմաններին բավարարող: Տվյալների ֆիլտրացման համար  SELECT հրամանում օգտագործվում է WHERE օպերատորը, ինչից հետո նշվում է պայմանը։ </p>\r\n	<p class=\"span_left span_left_green\">WHERE պայման</p> \r\n\r\n	<p>Եթե ​​պայմանը ճիշտ է, ապա տողը ընկնում է արդյունքների ընտրության մեջ։ Կարելի է օգտագործել համեմատության օպերատորները, որոնք համեմատում են երկու գործողություն։ </p>\r\n\r\n	<ol class=\"php_mysql_content\">\r\n		<li>= համեմատություն հավասարության համար</li>\r\n		<li>!= համեմատություն անհավասարության համար</li>\r\n		<li><> անհավասարության համեմատություն</li>\r\n		<li>< պակաս քան</li>\r\n		<li>> ավելին քան</li>\r\n		<li><= պակաս կամ հավասար</li>\r\n		<li>>= ավելի մեծ կամ հավասար</li>\r\n	</ol>\r\n\r\n	\r\n\r\n<p>Պետք է նշել, որ MySQL-ում մեծատառ և փոքրատառը նշանակություն չունի, \"Samsung\" տողը նույն է, ինչ \"SAMSUNG\" կամ \"samSunG\" տողը։</p>\r\n<br>\r\n<p><b>Տրամաբանական օպերատորներ</b></p>\r\n<br>\r\n <p>Տրամաբանական օպերատորները թույլ են տալիս համատեղել բազմաթիվ պայմաններ: MySQL- ում կարող են օգտագործվել հետևյալ տրամաբանական օպերատորները.</p>\r\n\r\n<ol class=\"php_mysql_content\">\r\n	<li><b>AND:</b>\r\n		Տրամաբանական ԵՎ գործողություն. Այն միավորում է երկու արտահայտություն:\r\n		<p class=\"span_left_green\">արտահայտություն1 AND արտահայտություն2</p>\r\n	</li>\r\n	<li><b>OR:</b> \r\n		Տրամաբանական ԿԱՄ գործողություն: Այն նաև միավորում է երկու արտահայտություն։\r\n		<p class=\"span_left_green\">արտահայտություն1 OR արտահայտություն2</p>\r\n	</li>\r\n	<li><b>NOT:</b>\r\n		Տրամաբանական ժխտման գործողություն:\r\n		<p class=\"span_left_green\">NOT արտահայտություն</p>\r\n	</li>\r\n</ol>', '<p>Օրինակ 1․ Ընտրենք Samsung-ի արտադրած բոլոր ապրանքները.</p>\r\n<p class=\"span_left span_left_green\">\r\n		SELECT * FROM Products WHERE Manufacturer = \'Samsung\';\r\n		<span class=\"last_span\"><img src=\"../image/333.png\"></span>\r\n	</p>\r\n<p>Օրինակ 2․</p>\r\n<p class=\"span_left span_left_green\">SELECT * FROM Products WHERE Manufacturer =\'Samsung\' OR NOT Price > 30000 AND ProductCount > 2;</p>\r\n<p>Այս դեպքում արտահայտությունը նախ հաշվարկվում է NOT Price > 30000, այսինքն ՝ գինը պետք է լինի պակաս կամ հավասար 30 000-ի:</p>\r\n\r\n<p>Դրանից հետո արտահայտությունը հաշվարկվում է NOT Price > 30000 AND ProductCount > 2, այսինքն ՝ գինը պետք է լինի պակաս կամ հավասար 30 000-ի, և միևնույն ժամանակ ապրանքների քանակը պետք է 2-ից մեծ լինի:</p>\r\n\r\n<p>Վերջում OR օպերատորը հաշվարկվում է. Կա՛մ գինը պետք է լինի պակաս, կամ հավասար լինի 30 000-ի, և միևնույն ժամանակ ապրանքների քանակը պետք է լինի 2-ից ավելի, կամ արտադրողը պետք է լինի Samsung-ը</p>', '#018174'),
(4, 'UPDATE', '<p>UPDATE հրամանը օգտագործվում է առկա տողերը փոփոխելու համար: Այն ունի հետևյալ շարահյուսությունը.</p>\r\n<p class=\"span_left span_left_green\">\r\n	UPDATE աղյուսակի_անվանում\r\n<span class=\"last_span\">SET սյունակ1 = նշանակություն1, սյունակ2 = նշանակություն2, ... սյունակN = նշանակությունN</span>\r\n<span class=\"last_span\">[WHERE պայմանի_հայտարարում]</span>\r\n</p>\r\n\r\n<p>Օգտագործելով WHERE արտահայտությունը կարող ենք փոփոխել արտադրողի անունը «Samsung»-ից «Samsung Inc.»-ի։</p>\r\n<p class=\"span_left span_left_green\">\r\nUPDATE Products\r\n<span class=\"last_span\">SET Manufacturer = \'Samsung Inc.\'</span>\r\n<span class=\"last_span\">WHERE Manufacturer = \'Samsung\';</span>\r\n</p>\r\n<p>Փոփոխելիս, հատուկ արժեքների և արտահայտությունների փոխարեն, մենք կարող ենք օգտագործել DEFAULT և NULL բանալիային բառերը։</p>\r\n<p class=\"span_left span_left_green\">\r\n	UPDATE Products\r\n	<span class=\"last_span\">SET ProductCount= DEFAULT</span>\r\n	<span class=\"last_span\">WHERE Manufacturer = \'Huawei\';</span>\r\n</p>', '<p>Օրինակ 1. Եկեք բոլոր ապրանքների գինը բարձրացնենք 3000-ով։</p>\r\n<p class=\"span_left span_left_green\">\r\n	UPDATE Products\r\n<span class=\"last_span\">SET Price = Price + 3000;</span>\r\n</p>\r\n<p>Օրինակ 2․ Կարող եք նաև միանգամից փոփոխել բազմաթիվ սյունակներ։</p>\r\n<p class=\"span_left span_left_green\">\r\n	UPDATE Products\r\n	<span class=\"last_span\">SET Manufacturer = \'Samsung\',</span>\r\n	<span>ProductCount = ProductCount + 3</span>\r\n	<span class=\"last_span\">WHERE Manufacturer = \'Samsung Inc.\';</span>\r\n</p>', '#018174'),
(5, 'DELETE', '<p>DELETE հրամանը ջնջում է տվյալները բազայից: Այն ունի հետևյալ շարահյուսությունը․</p>\r\n<p class=\"span_left span_left_green\">\r\n	DELETE FROM աղյուսակի_անվանում\r\n<span class=\"last_span\">[WHERE ջնջելու_պայմանը]</span>\r\n</p>\r\n<p>Եթե ​​անհրաժեշտ է ընդհանրապես ջնջել բոլոր տողերը, անկախ պայմանից, ապա պայմանը կարող է բաց թողնվել.</p>\r\n<p class=\"span_left span_left_green\">\r\nDELETE FROM Products;\r\n</p>', '<p>Օրինակ 1. Ջնջենք տողերը, որոնց մոտ արտադրողը Huawei է․</p>\r\n<p class=\"span_left span_left_green\">\r\n	DELETE FROM Products\r\n<span class=\"last_span\">WHERE Manufacturer=\'Huawei\';</span>\r\n</p>\r\n\r\n<p>Օրինակ 2. Կամ հանեք բոլոր այն ապրանքները, որոնք արտադրվում են Apple-ի կողմից և ունեն 60,000-ից ցածր գին.</p>\r\n<p class=\"span_left span_left_green\">\r\n	DELETE FROM Products\r\n<span class=\"last_span\">WHERE Manufacturer=\'Apple\' AND Price < 60000;</span>\r\n</p>', '#018174'),
(6, 'ORDER BY ', '<p>Օպերատոր ORDER BY-ը տեսակավորում է արժեքները մեկ կամ ավելի սյունակների մեջ: Օրինակ կարգավորենք ընտրությունը Products աղյուսակից Price սյունակ։</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT * FROM Products\r\n<span class=\"last_span\">ORDER BY Price;</span>\r\n</p>\r\n<p>Որպես տեսակավորման չափանիշ կարող է օգտագործվել նաև սյունակի վրա հիմնված բարդ արտահայտությունը.</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT ProductName, Price, ProductCount\r\n<span class=\"last_span\">FROM Products</span>\r\n<span class=\"last_span\">ORDER BY ProductCount * Price;</span>\r\n</p>\r\n<p><b>Տեսակավորում ըստ նվազման կարգի</b></p>\r\n<p>Լռելյայն, տվյալները տեսակավորվում են աճման կարգով, բայց կարող եք օգտագործել DESC օպերատորը՝ ըստ նվազման կարգի տեսակավորման:</p>\r\n<p class=\"span_left span_left_green\">\r\nSELECT ProductName, ProductCount\r\n<span class=\"last_span\">FROM Products</span>\r\n<span class=\"last_span\">ORDER BY ProductCount DESC;</span>\r\n</p>\r\n<p>Լռելյայնորեն, օգտագործվում է ASC օպերատորը DESC-ի փոխարեն, որը տեսակավորվում է աճման կարգով.</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT ProductName, ProductCount\r\n<span class=\"last_span\">FROM Products</span>\r\n<span class=\"last_span\">ORDER BY ProductCount ASC;</span>\r\n</p>\r\n <p><b>Տեսակավորում մի քանի սյունակներում</b></p>\r\n<p>Միանգամից մի քանի սյունակների տեսակավորում կատարելիս, բոլոր սյունակները նշվում են ստորակետերով՝ ORDER BY օպերատորից հետո.</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT ProductName, Price, Manufacturer\r\n<span class=\"last_span\">FROM Products</span>\r\n<span class=\"last_span\">ORDER BY Manufacturer, ProductName;</span>\r\n</p>', '<p>Տրված օրինակում այստեղ տողերը նախ տեսակավորվում են ըստ Manufacturer սյունակի` աճման կարգով: Այնուհետև, եթե կան երկու տողեր, որոնցում Manufacturer սյունը նույն արժեքն է, ապա դրանք դասավորված են ըստ ProductName սյունակի նաև աճման կարգով:</p>\r\n\r\n <p class=\"span_left span_left_green\">\r\n 	SELECT ProductName, Price, Manufacturer\r\n	<span class=\"last_span\">FROM Products</span>\r\n	<span class=\"last_span\">ORDER BY Manufacturer ASC, ProductName DESC;</span>\r\n </p>', '#018174'),
(7, 'LIMIT', '<p>LIMIT օպերատորը թույլ է տալիս վերցնել որոշակի քանակությամբ տողեր և ունի հետևյալ շարահյուսությունը.</p>\r\n<p class=\"span_left span_left_green\">\r\n	LIMIT [offset,] rowcount\r\n</p>\r\n<p>Եթե ​​մեկ պարամետր է փոխանցվում LIMIT օպերատորին, ապա դա ցույց է տալիս թե քանի տող պետք է հեռացվի։ Եթե ​​երկու պարամետր է փոխանցվում, այդ դեպքում առաջին պարամետրը կարգավորում է թե քանի տող պետք է բաց թողնվի, իսկ երկրորդ պարամետրը ցույց է տալիս ինչքան տող պետք է հեռացվի։</p>\r\n<p>Սովորաբար, LIMIT դրույթը օգտագործվում է ORBER BY նախադասության հետ միասին.</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT * FROM Products\r\n<span class=\"last_span\">ORDER BY ProductName</span>\r\n<span class=\"last_span\">LIMIT 2, 3;</span>\r\n</p>', '<p>Օրինակ, ընտրենք առաջին երեք տողերը.</p>\r\n <p class=\"span_left span_left_green\">\r\n SELECT * FROM Products\r\n<span class=\"last_span\">LIMIT 3;</span>\r\n<span class=\"last_span\"><img src=\"../image/444.png\"></span>\r\n</p>\r\n<p>Այժմ օգտագործենք երկրորդ պարամետրը և ընդգծենք տեղաշարժը, որով ընտրությունը պետք է տեղի ունենա.</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT * FROM Products \r\n	<span class=\"last_span\">LIMIT 2, 3;</span>	\r\n</p>\r\n<p>Այս դեպքում առաջին երկու տողերը շրջանցվում են և վերցնում են հաջորդ 3 տողերը․</p>\r\n<p class=\"span_left span_left_green\">\r\n	<img src=\"../image/555.png\">\r\n</p>', '#018174'),
(8, 'AVG', '<p> AVG ֆունկցիան վերադարձնում է աղյուսակի ընտրված սյունակների միջին արժեքը։ Այն ունի հետևյալ շարահյուսությունը․</p>\r\n<p class=\"span_left span_left_green\">SELECT AVG(սյունակի_անվանում) FROM աղյուսակի_անվանում</p>\r\n', '<p>Օրինակ 1. Ենթադրենք, որ ունեք հետևյալ Products աղյուսակը:</p>\r\n<p class=\"span_left span_left_green\">\r\n	CREATE TABLE Products\r\n	(\r\n    <span>Id INT AUTO_INCREMENT PRIMARY KEY,</span>\r\n    <span>ProductName VARCHAR(30) NOT NULL,</span>\r\n    <span>Manufacturer VARCHAR(20) NOT NULL,</span>\r\n    <span>ProductCount INT DEFAULT 0,</span>\r\n    <span>Price DECIMAL NOT NULL</span>\r\n	<span class=\"last_span\">);</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">\r\n	   \r\n	INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price) \r\n	<span class=\"last_span\">VALUES</span>\r\n	<span class=\"last_span\">(\'iPhone X\', \'Apple\', 3, 76000),</span>\r\n	<span class=\"last_span\">(\'iPhone 8\', \'Apple\', 2, 51000),</span>\r\n	<span class=\"last_span\">(\'iPhone 7\', \'Apple\', 5, 32000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S9\', \'Samsung\', 2, 56000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S8\', \'Samsung\', 1, 46000),</span>\r\n	<span class=\"last_span\">(\'Honor 10\', \'Huawei\', 5, 28000),</span>\r\n	<span class=\"last_span\">(\'Nokia 8\', \'HMD Global\', 6, 38000)</span>\r\n</p>\r\n<p>Տվյալների բազայից գտնենք ապրանքների միջին գինը։</p>\r\n<p class=\"span_left span_left_green\">SELECT AVG(Price) AS Average_Price FROM Products</p>\r\n\r\n<p>Օրինակ 2․ Գտնել բոլոր ապրանքների միջին գումարը, հաշվի առնելով դրանց քանակը։</p>\r\n\r\n<p class=\"span_left span_left_green\">SELECT AVG(Price * ProductCount) FROM Products</p>', '#018174'),
(9, 'COUNT', '<p>COUNT ֆունկցիան հաշվում է տողերի քանակը հարցման մեջ։ Այն ունի հետևյալ շարահյուսությունը․</p>\r\n <p class=\"span_left span_left_green\">SELECT COUNT(սյունակի_անվանում) FROM աղյուսակի_անվանում</p>', '<p>Հաշվել տողերի քանակը որոշակի սյունակի համար։</p>\r\n<p class=\"span_left span_left_green\">\r\n	CREATE TABLE Products\r\n	(\r\n    <span>Id INT AUTO_INCREMENT PRIMARY KEY,</span>\r\n    <span>ProductName VARCHAR(30) NOT NULL,</span>\r\n    <span>Manufacturer VARCHAR(20) NOT NULL,</span>\r\n    <span>ProductCount INT DEFAULT 0,</span>\r\n    <span>Price DECIMAL NOT NULL</span>\r\n	<span class=\"last_span\">);</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">\r\n	   \r\n	INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price) \r\n	<span class=\"last_span\">VALUES</span>\r\n	<span class=\"last_span\">(\'iPhone X\', \'Apple\', 3, 76000),</span>\r\n	<span class=\"last_span\">(\'iPhone 8\', \'Apple\', 2, 51000),</span>\r\n	<span class=\"last_span\">(\'iPhone 7\', \'Apple\', 5, 32000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S9\', \'Samsung\', 2, 56000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S8\', \'Samsung\', 1, 46000),</span>\r\n	<span class=\"last_span\">(\'Honor 10\', \'Huawei\', 5, 28000),</span>\r\n	<span class=\"last_span\">(\'Nokia 8\', \'HMD Global\', 6, 38000)</span>\r\n</p>\r\n<p>Այս դեպքում NULL արժեքներով տողերն անտեսվում են։</p>\r\n<p class=\"span_left span_left_green\">SELECT COUNT(Manufacturer) FROM Products</p>', '#018174'),
(10, 'MIN և MAX', '<p>MIN.Հաշվարկում է ամենափոքր արժեքը։</p>\r\n<p>MAX.Հաշվարկում է ամենամեծ արժեքը:</p>\r\n<p>Շարահյուսություն․</p>\r\n<p class=\"span_left span_left_green\">SELECT MIN(սյունակի_անվանում), MAX(սյունակի_անվանում) FROM աղյուսակի_անվանում</p>', '<p>Արտադրանքների մեջ գտնենք նվազագույն գինը։</p>\r\n<p class=\"span_left span_left_green\">\r\n	CREATE TABLE Products\r\n	(\r\n    <span>Id INT AUTO_INCREMENT PRIMARY KEY,</span>\r\n    <span>ProductName VARCHAR(30) NOT NULL,</span>\r\n    <span>Manufacturer VARCHAR(20) NOT NULL,</span>\r\n    <span>ProductCount INT DEFAULT 0,</span>\r\n    <span>Price DECIMAL NOT NULL</span>\r\n	<span class=\"last_span\">);</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">\r\n	   \r\n	INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price) \r\n	<span class=\"last_span\">VALUES</span>\r\n	<span class=\"last_span\">(\'iPhone X\', \'Apple\', 3, 76000),</span>\r\n	<span class=\"last_span\">(\'iPhone 8\', \'Apple\', 2, 51000),</span>\r\n	<span class=\"last_span\">(\'iPhone 7\', \'Apple\', 5, 32000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S9\', \'Samsung\', 2, 56000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S8\', \'Samsung\', 1, 46000),</span>\r\n	<span class=\"last_span\">(\'Honor 10\', \'Huawei\', 5, 28000),</span>\r\n	<span class=\"last_span\">(\'Nokia 8\', \'HMD Global\', 6, 38000)</span>\r\n</p>\r\n<p>Այս ֆունկցիաները նույնպես անտեսում են NULL արժեքները։</p>\r\n<p class=\"span_left span_left_green\">SELECT MIN(Price), MAX(Price) FROM Products</p>', '#018174'),
(11, 'SUM', '<p>SUM ֆունկցիան սյունակում հաշվում է արժեքների գումարը:</p>\r\n<p class=\"span_left span_left_green\">SELECT SUM(սյունակի_անվաում) FROM աղյուսակի_անվանում</p>', '<p>Հաշվել ապրանքների ընդհանուր քանակը։</p>\r\n<p class=\"span_left span_left_green\">\r\n	CREATE TABLE Products\r\n	(\r\n    <span>Id INT AUTO_INCREMENT PRIMARY KEY,</span>\r\n    <span>ProductName VARCHAR(30) NOT NULL,</span>\r\n    <span>Manufacturer VARCHAR(20) NOT NULL,</span>\r\n    <span>ProductCount INT DEFAULT 0,</span>\r\n    <span>Price DECIMAL NOT NULL</span>\r\n	<span class=\"last_span\">);</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">\r\n	   \r\n	INSERT INTO Products(ProductName, Manufacturer, ProductCount, Price) \r\n	<span class=\"last_span\">VALUES</span>\r\n	<span class=\"last_span\">(\'iPhone X\', \'Apple\', 3, 76000),</span>\r\n	<span class=\"last_span\">(\'iPhone 8\', \'Apple\', 2, 51000),</span>\r\n	<span class=\"last_span\">(\'iPhone 7\', \'Apple\', 5, 32000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S9\', \'Samsung\', 2, 56000),</span>\r\n	<span class=\"last_span\">(\'Galaxy S8\', \'Samsung\', 1, 46000),</span>\r\n	<span class=\"last_span\">(\'Honor 10\', \'Huawei\', 5, 28000),</span>\r\n	<span class=\"last_span\">(\'Nokia 8\', \'HMD Global\', 6, 38000)</span>\r\n</p>\r\n<p class=\"span_left span_left_green\">SELECT SUM(ProductCount) FROM Products</p>\r\n<p>Բացի այդ, սյունակի անվան փոխարեն կարող է փոխանցվել հաշվարկված արտահայտություն: Օրինակ, եկեք գտնենք առկա բոլոր ապրանքների ընդհանուր արժեքը:</p>\r\n<p class=\"span_left span_left_green\">SELECT SUM(ProductCount * Price) FROM Products</p>', '#018174'),
(12, 'GROUP BY', '<p>GROUP BY Ֆունկցիան որոշում է, թե ինչպես տողերը կխմբավորվեն։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_green\">\r\nSELECT սյունակի_անվանում FROM աղյուսակի_անվանում\r\n<span class=\"last_span\">[WHERE տողերի_ֆիլտրացման_պայման]</span>\r\n<span class=\"last_span\">[GROUP BY սյունակներ_խմբավորման_համար]</span>\r\n<span class=\"last_span\">[ORDER BY սյունակներ_սորտավորման_համար]</span>\r\n</p>\r\n<p>Եթե SELECT արտահայտությունը ընտրում է մեկ կամ ավելի սյուններ, ինչպես նաև օգտագործում է ագրեգատային ֆունկցիաներ, ապա պետք է օգտագործել GROUP BY արտահայտությունը։\r\nGROUP BY օպերատորը կարող է խմբավորվել բազմաթիվ սյունակներ:\r\nՊետք է հիշել, որ GROUP BY արտահայտությունը պետք է գա WHERE արտահայտությունից հետո, բայց ORDER BY արտահայտությունից առաջ:</p>', '<p>Ապրանքները խմբավորենլ ըստ արտադրողի։</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT Manufacturer, COUNT(*) AS ModelsCount\r\n<span class=\"last_span\">FROM Products</span>\r\n<span class=\"last_span\">GROUP BY Manufacturer</span>\r\n<span class=\"last_span\"><img src=\"../image/666.PNG\">\r\n</span>\r\n</p>\r\n<p>SELECT հայտարարության առաջին սյունակը՝ Manufacturer-ը ներկայացնում է խմբի անվանումը,իսկ երկրորդը՝ ModelsCount-ը, հաշվում է COUNT ֆունկցիայի արդյունքը, որը հաշվարկում է խմբում տողերի քանակը:</p>', '#018174'),
(13, 'HAVING', '<p>HAVING օպերատորը թույլ է տալիս կատարել խմբի ֆիլտրացում, այսինքն որոշում է, թե ինպիսի խմբեր պետք է ընդգրկված լինեն դուրս եկվող արդյունքի մեջ։ HAVING-ի օգտագործումը գրեթե նույնն է, ինչ WHERE-ի օգտագործումը: Այսինքն WHERE-ը օգտագործվում է տողերի ֆիլտրացման համար, իսկ HAVING-ը խմբերի։</p>\r\n <p class=\"span_left span_left_green\">\r\nSELECT սյունակի_անվանում FROM աղյուսակի_անվանում\r\n<span class=\"last_span\">[WHERE տողերի_ֆիլտրացման_պայման]</span>\r\n<span class=\"last_span\">[GROUP BY սյունակներ_խմբավորման_համար]</span>\r\n<span class=\"last_span\">[HAVING խմբերի_ֆիլտրացման_պայման]</span>\r\n<span class=\"last_span\">[ORDER BY սյունակներ_սորտավորման_համար]</span>\r\n</p>', '<p>Եկեք գտնենք ապրանքների բոլոր խմբերը ըստ արտադրողի, որոնց համար սահմանված է 1-ից ավելի մոդել։</p>\r\n<p class=\"span_left span_left_green\">\r\nSELECT Manufacturer, COUNT(*) AS ModelsCount\r\nFROM Products\r\n<span class=\"last_span\">GROUP BY Manufacturer</span>\r\n<span class=\"last_span\">HAVING COUNT(*) > 1</span>\r\n<span class=\"last_span\"><img src=\"../image/777.PNG\"></span>\r\n</p>\r\n<p>Նույն հրամանում կարող եք նաև միավորել WHERE և HAVING արտահայտությունները։</p>\r\n<p class=\"span_left span_left_green\">\r\n	SELECT Manufacturer, COUNT(*) AS ModelsCount\r\nFROM Products\r\n<span class=\"last_span\">WHERE Price * ProductCount > 80000</span>\r\n<span class=\"last_span\">GROUP BY Manufacturer</span>\r\n<span class=\"last_span\">HAVING COUNT(*) > 1;</span>\r\n</p>\r\n<p>Այսինքն, այս դեպքում տողերը նախ ֆիլտրացվում են։ Ընտրվում են այն ապրանքները, որոնց ընդհանուր արժեքը ավելի քան 80,000 է: Այնուհետև ընտրված ապրանքները խմբավորվում են ըստ արտադրողի, հետո ֆիլտրացվում են ըստ խմբերի։Ընտրվում են այն խմբերը, որոնք պարունակում են 1-ից ավելի մոդել:</p>\r\n<p>Եթե ​​միևնույն ժամանակ անհրաժեշտ է սորտավորում, ապա ORDER BY արտահայտությունը գրվում է HAVING-ից հետո։</p>\r\n\r\n<p class=\"span_left span_left_green\">\r\n	SELECT Manufacturer, COUNT(*) AS Models, SUM(ProductCount) AS Units FROM Products\r\n<span class=\"last_span\">WHERE Price * ProductCount > 80000</span>\r\n<span class=\"last_span\">GROUP BY Manufacturer</span>\r\n<span class=\"last_span\">HAVING SUM(ProductCount) > 2</span>\r\n<span class=\"last_span\">ORDER BY Units DESC;</span>\r\n<span class=\"last_span\"><img src=\"../image/888.PNG\" alt=\"\"></span>\r\n</p>\r\n<p>Այստեղ խմբավորումը կատարվում է ըստ արտադրողի, ինչպես նաև ընտրվում են մոդելների քանակը յուրաքանչյուր արտադրողի համար և բոլոր արտադրանքների ընդհանուր քանակը այս բոլոր մոդելներով։ Վերջում խմբերը տեսակավորվում են ըստ ապրանքների քանակի `նվազման կարգով:</p>\r\n', '#018174'),
(21, 'xcvc', 'vcxb ', 'cxvvb', 'green');

-- --------------------------------------------------------

--
-- Структура таблицы `patasxanner`
--

CREATE TABLE `patasxanner` (
  `id` int(11) NOT NULL,
  `patasxan_1_php` text NOT NULL,
  `patasxan_2_php` text NOT NULL,
  `patasxan_3_php` text NOT NULL,
  `patasxan_4_php` text NOT NULL,
  `patasxan_1_mysql` text NOT NULL,
  `patasxan_2_mysql` text NOT NULL,
  `patasxan_3_mysql` text NOT NULL,
  `patasxan_4_mysql` text NOT NULL,
  `chisht_php_1` int(2) NOT NULL DEFAULT 0,
  `chisht_php_2` int(2) NOT NULL DEFAULT 0,
  `chisht_php_3` int(2) NOT NULL DEFAULT 0,
  `chisht_php_4` int(2) NOT NULL DEFAULT 0,
  `chisht_mysql_1` int(2) NOT NULL DEFAULT 0,
  `chisht_mysql_2` int(2) NOT NULL DEFAULT 0,
  `chisht_mysql_3` int(2) NOT NULL DEFAULT 0,
  `chisht_mysql_4` int(2) NOT NULL DEFAULT 0
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `patasxanner`
--

INSERT INTO `patasxanner` (`id`, `patasxan_1_php`, `patasxan_2_php`, `patasxan_3_php`, `patasxan_4_php`, `patasxan_1_mysql`, `patasxan_2_mysql`, `patasxan_3_mysql`, `patasxan_4_mysql`, `chisht_php_1`, `chisht_php_2`, `chisht_php_3`, `chisht_php_4`, `chisht_mysql_1`, `chisht_mysql_2`, `chisht_mysql_3`, `chisht_mysql_4`) VALUES
(1, '@', '#', '!', '$', 'CREATE DATABASE  ', 'CREATE TABLE', 'DROP DATABASE', '', 0, 0, 0, 1, 1, 0, 0, 0),
(2, 'Ճիշտ է', 'Սխալ է', '', '', 'CREATE TABLE', 'RENAME TABLE', 'DROP TABLE', '', 0, 1, 0, 0, 0, 1, 0, 0),
(3, 'Ստորակետով (,)', 'Կետ ստորակետով(;)', 'Վերջակետով (։)', 'Կետով (.)', 'Նշել աղյուսակի հիմնական բանալին:', 'Հստակեցնել, որ սյունակի արժեքը ավտոմատ կերպով կավելացվի, երբ նոր տող ավելացվի:', 'Սյունակում սահմանել արժեքների տիրույթի սահմանափակում:', '', 0, 1, 0, 0, 1, 0, 0, 0),
(4, 'He plays $sport', 'He plays soccer', '', '', 'TEXT', 'VARCHAR', 'SUBSTR', '', 1, 0, 0, 0, 0, 0, 1, 0),
(5, 'int a=5;', 'int a=5;', '$a=5;', '', 'VARCHAR', 'TINYTEXT', 'LARGETEXT', 'CHAR', 0, 0, 1, 0, 0, 0, 0, 1),
(6, 'cout', 'echo', 'for', 'while', 'ամսվա օրը՝ որպես թվային արժեք։', 'շաբաթվա օրը՝ որպես թվային արժեք։', 'տարվա օրվա համարը։', 'տարվա եռամսյակի համարը։', 0, 1, 0, 0, 1, 0, 0, 0),
(7, 'Օգտագործելով $_POST փոփոխականը', 'Օգտագործելով $POST փոփոխականը', 'Օգտագործելով $get_post փոփոխականը', '', 'SUM', 'AVG', 'LIMIT', 'COUNT', 1, 0, 0, 0, 1, 0, 0, 0),
(8, 'else', '!==', 'instanceof', 'for', 'TIME', 'TIMESTAMP', 'DATETIME', 'YEAR', 1, 0, 0, 0, 0, 0, 1, 0),
(9, 'Բազմապատկում', 'Աստիճանի բարձրացում', 'Գումարում', 'Մեկնաբանում', 'INSERT', 'SELECT', 'UPDATE', 'ORDER BY', 0, 1, 0, 0, 1, 0, 0, 0),
(10, '/', '**', '//', '*/', 'Ճիշտ է', 'Սխալ է', '', '', 0, 0, 1, 0, 1, 0, 0, 0);

-- --------------------------------------------------------

--
-- Структура таблицы `php_teg`
--

CREATE TABLE `php_teg` (
  `id` int(11) NOT NULL,
  `teg_name` varchar(25) NOT NULL,
  `teg_bacatrutyun` text NOT NULL,
  `teg_orinak` text NOT NULL,
  `teg_guyn` varchar(10) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `php_teg`
--

INSERT INTO `php_teg` (`id`, `teg_name`, `teg_bacatrutyun`, `teg_orinak`, `teg_guyn`) VALUES
(1, 'phpinfo', '<p> phpinfo ֆունկցիան դուրս  է բերում ընթացիկ PHP կազմի վերաբերյալ տեղեկատվություն։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	phpinfo ( int $flags = INFO_ALL ):bool	\r\n</p>\r\n<p> Ցուցադրում է մեծ քանակությամբ տեղեկատվություն PHP-ի ընթացիք վիճակի մասին: Սա ներառում է տեղեկություններ PHP-ի կազմության մասին, ընդլայնումների, PHP-ի վերսիաների, PHP միջավայրի, ուղինների, տեղեկություն սերվերից և այլնի մասին։\r\n</p>\r\n<p>phpinfo() նաև օգագործվում է կարգաբերումների համար, քանի որ այն պարունակում է EGPCS (Environment, GET, POST, Cookie, Server) բոլոր տվյալները:</p>\r\n<p>flags պարամետրը կարելի է կարգավորել, փոխանցելով բիթային մասկ մեկ կամ մի քանի ներքևում փոխանցված հաստատունների։ Այդ բիթային մասկը փոխանցվում է, որպես ոչ պարտադիր flags արգումենտ։</p>\r\n<ul class=\"php_mysql_content\">\r\n	<li><b>INFO_GENERAL։</b> Կոնֆիգուրացիայի տող, php.ini գտնվելու վայրը, կառուցման ամսաթիվ, սերվեր, համակարգ և այլն․ Արժեք․ 1,</li>\r\n	<li><b>INFO_CREDITS:</b> PHP-ի ստեղծողները․ Արժեք․ 2,</li>\r\n	<li><b>INFO_CONFIGURATION։</b> Հիմնական և լոկալ PHP դիրեկտիվայի ներկայիս արժեքը․ Արժեք․ 4,</li>\r\n	<li><b>INFO_MODULES։</b> Բեռնված մոդուլները և դրանց պարամետրերը․ Արժեք․ 8,</li>\r\n	<li><b>INFO_ENVIRONMENT։</b> Միջավայրի փոփոխականների ինֆորմացիան․ Արժեք․ 16,</li>\r\n	<li><b>INFO_VARIABLES։</b> Դուրս է բերում բոլոր կանխորոշված փոփոխակաները EGPCS-ից․ Արժեք․ 32,</li>\r\n	<li><b>INFO_LICENSE։</b> Տեղեկատվություն PHP լիցենզիայի վերաբերյալ․ Արժեք․ 64,</li>\r\n	<li><b>INFO_ALL։</b> Դուրս է բերում բոլոր վերը նշվածը․ Արժեք․ -1։</li>\r\n</ul>\r\n<p>Վերադարձնում է true (ճշմարիտ) կամ false (սխալ) արժեքներ:</p>\r\n ', '<p class=\"span_left span_left_purple\">&lt;?php\r\n\r\n<span>// Ցույց տալ ամբողջ ինֆորմացիան, լեռելայնորեն INFO_ALL</span>\r\n<span>phpinfo();</span>\r\n\r\n<span>// Ցույց միայն բեռնված մոդուլներուի ինֆորմացիան</span>\r\n<span>phpinfo(8) // Ցույց է տալիս նույն արդյունքը։</span>\r\n<span>phpinfo(INFO_MODULES);\r\n</span>\r\n<span class=\"last_span\">?&gt;</span></p>', '#8e08ab'),
(2, 'echo', '<p>Կիառական է սկսած php4-ից: echo ֆունկցիայի միջոցով php-ն կարողանում է արտահանել բոլոր պարամետրերը, այդ թվում նաև html-ի տեգերը: Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>echo ( string $arg1 [, string $...] )</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>echo()-ն իրականում ֆունկցիա չէ: Այն ծրագրային լեզվի կառուցվածքային տարր է: Եվ եթե անհրաժեշտ է մեկից ավելի պարամետրեր արտահանել echo-ի միջոցով, ապա պարամետրերը չպետք է ներառել փակագծերի մեջ: Իսկ եթե նախապես կոնֆիգուրացիոն ֆայլում ակտիվացված է (enabled) short_open_tag պարամետրը, ապա կարելի echo-ի փոխարեն անմիջապես կիրառել &lt;?=$А?&gt; կոդը, ուր A-ն ցանկացած փոփոխական է:</p>', '<p>Այժմ դիտարկենք մի քանի օրինակ</p>\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>echo \"Hello World\";</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n\r\n<p>Այս դեպքում մենք կունենանք Hello World արտահայտությունը:</p>\r\n\r\n\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>echo \" Այստեղ ինչպես տեսնում եք գրված է ոչ թե մեկ տող, այլ մի քանի տողեր: Սա նշանակում է, որ միաժամանակ կարելի է արտահանել մի քանի տող:\";</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n\r\n\r\n\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>$Anun = \"Հովհաննես\";</span>\r\n	<span>$Azganun = \"Թումանյանը\";</span>\r\n	<span>echo \"$Anun  $Azganun banastexc e:\";</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>Մենք կունենանք Հովհաննես Թումանյանը banastexc e:</p>\r\n<p>Հայերեն տառատիպերի հետ  հնարավոր է լինեն խնդիրներ, այդ պատճառով սկզբնական շրջանում ճիշտ կլինի փորձել միայն լատինատառ գրություններ, այսինքն  ASCII կոդավորման:<p>\r\n<p>Կամ գլխավոր (main կամ index անունը կրող) ֆայլում գրել այս մետատեգը</p>\r\n<p class=\"span_left span_left_purple\">&lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"&gt;</p>', '#8e08ab'),
(3, 'print', '<p>print ֆունկցիան դուրս է բերում մեկ կամ մի քանի տող: Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	print ( string $arg ) : int\r\n</p>\r\n<p>Դուրս է բերում arg-ն։</p>\r\n<p>Իրականում print-ը ֆունկցիա չի համարվում, այդ իսկ պատճառով արգումենտը փակագծերում գրել պարտադիր չէ:\r\nՀիմնական տարբերություը echo-ի և print-ի միջև այն է, որ print-ը ընդունում է ընդհամենը մեկ արգումենտ և միշտ վերադարձնում է 1։</p>\r\n', '<p class=\"span_left span_left_purple\">  	&lt;?php 		<span>print (\"Hello World!\");</span> 	<span class=\"last_span\">?&gt;</span> </p>  <p>Արդյունք</p>  <p>Այս դեպքում մենք կունենանք Hello World! արտահայտությունը:</p>', '#8e08ab'),
(4, 'print_r', '<p>print_r-ը ֆունկցիան տպում է հեշտ կարդացվող փոփոխականների ինֆորմացիան։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	print_r ( mixed $value , bool $return = false ) : string|bool\r\n</p>\r\n<p>value պարամետրը դուրս է բերում էկրանին արտահայտությունը։</p>\r\n<p>return պարամետրը ընդհատում է print_r ելքը, եթե այն վերադարձնում է true, ապա print_r()-ը կվերադարձնի ինֆորմացիան բրաուզերում տպելու փոխարեն։</p>\r\n<p> Եթե ֆունկցիային փոխանցվում է string, int կամ float տիպերը, ապա կտպվի հենց արժեքը։ Եթե փոխանցվում է array զանգված, արժեքը կտպվի ֆորմատում ցույց տալով զանգվածի բանալիները և էլեմենտները։ Նույնատիպ ֆորմատ օգտագործվում է օբյեկտների համար։</p>\r\n<p>Եթե return պարամետրը ստանում է true, այդ ֆունկցիան կվերադարձնի տողը ( string ): Հակառակ դեպքում, վերադարձվող արժեքը հավասար կլինի true:</p>', '<p class=\"span_left span_left_purple\">  &lt;?php <span>$a = array (\'a\' => \'apple\', \'b\' => \'banana\', \'c\' => array (\'x\', \'y\', \'z\'));</span> <span>print_r ($a);</span> <span class=\"last_span\">?&gt;</span> </p> <p>Արդյունք</p> <p class=\"span_left span_left_purple\"> 	Array 	<span class=\"last_span\">(</span> 	   <span>[a] => apple</span> 	    <span>[b] => banana</span> 	    <span>[c] => Array</span> 	        <span class=\"last_span\"><span>(</span></span> 	            <span><span>[0] => x</span></span> 	            <span><span>[1] => y</span></span> 	            <span><span>[2] => z</span></span> 	        <span class=\"last_span\"><span>)</span></span> 	<span class=\"last_span\">)</span> </p>', '#8e08ab'),
(23, 'var_dump', '<p>var_dump ֆունկցիան դուրս է բերում ինֆորմացիա փոփոխականների մասին։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">var_dump ( mixed $value , mixed ...$values ) : void\r\n</p>\r\n<p>Ֆունկցիան դուրս է բերում ստրուկտուրային տեղեկատվություն մեկ կամ մի քանի արտահայտությունների վերաբերյալ, ներառյալ դրանց տեսակը և արժեքը: Զանգվածները և օբյեկտները վերլուծվում են ռեկուրսիվորեն, տարբեր հեռավորություններով ստրուկտուրաները վիզուալ ցուցադրելու համար:</p>\r\n<p>value-արտահայտություն որը պետք է տպել։</p>\r\n<p>values-հաջորդ արտահայտությունը տպելու համար։</p>\r\n<p>Այս ֆունկցիան չի վերադարձնում արժեք կատարումից հետո։ </p>', '<p class=\"span_left span_left_purple\"> &lt;?php <span>$a = array(1, 2, array(\"a\", \"b\", \"c\"));</span> <span>var_dump($a);</span> <span class=\"last_span\">?&gt;</span> </p>   <p>Արդյունք</p> <p class=\"span_left span_left_purple\"> 	array(3) {   		<span>[0]=></span>   		<span>int(1)</span>   		<span>[1]=></span>   		<span>int(2)</span>   		<span>[2]=></span>  		<span>array(3) {</span> 		    <span><span>[0]=></span></span> 		    <span><span>string(1) \"a\"</span></span> 		    <span><span>[1]=></span></span> 		    <span><span>string(1) \"b\"</span></span> 		    <span><span>[2]=></span></span> 		    <span><span>string(1) \"c\"</span></span> 	  	<span>}</span> 	<span class=\"last_span\">}</span> </p>', '#8e08ab'),
(24, 'substr', '<p> substr ֆունկցիան վերադարձնում է ենթատողը։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\"> substr ( string $string , int $offset , int|null $length = null ) : string\r\n</p>\r\n<p>Վերադարձնում է string տողի ենթատողը, որը սկսվում է offset սիմվոլի համարից և length սիմվոլների երկարությունից։</p>\r\n<p>string-մուտքային տող:</p>\r\n<p>Եթե offset ոչ բացասական է, վերադարձվող ենթատողը սկսվում է offset դիրքից, հաշվելով տողի սկզբից, որը սկսվում է 0-ից։</p>\r\n<p>Եթե offset-ը բացասական է, վերադարձվող ենթատողը սկսվում է այն դիրքից, կանգնած offset սիմվոլների string տողի վերջից։ Եթե string-ը քիչ է քան offset սիմվոլները, կվերադարձնի false։</p>', '<p>offset պարամետրի բացասական օգտագործումը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>$rest = substr(\"abcdef\", -1);    // վերադարձնում է \"f\"</span>\r\n	<span>$rest = substr(\"abcdef\", -2);    // վերադարձնում է \"ef\"</span>\r\n	<span>$rest = substr(\"abcdef\", -3, 1); // վերադարձնում է \"d\"</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>', '#8e08ab'),
(25, 'strlen', '<p>strlen ֆունկցիան վերադարձնում է տողի երկարությունը։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n    strlen ( string $string ) : int\r\n</p>\r\n<p>Տող, որի համար չափվում է երկարությունը։ Վերադարձնում է տողի երկարություն ճիշտ լինելու դեպքում և սխալ տողը դատարկ լինելու դեպքում։</p>\r\n', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n		<span>$str = \'abcdef\';</span>\r\n		<span>echo strlen($str); // 6</span>\r\n\r\n		<span>$str = \' ab cd \';</span>\r\n		<span>echo strlen($str); // 7</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>	', '#8e08ab'),
(26, 'trim', '<p>trim ֆունկցիան հեռացնում է բացատները տողի սկզբից և վերջից։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	trim ( string $string , string $characters = \" \\n\\r\\t\\v\\0\" ) : string	\r\n</p>\r\n\r\n<p>Այս ֆունկցիան վերադարձնում է string տիպի տող հեռացնելով տողի սկզբի և վերջի բացատները։ Եթե երկրորդ պարամետրը չի փոխանցվել, ապա trim() հեռացնում է հետևյալ սիմվոլները․</p>\r\n<ol class=\"php_mysql_content\">\r\n	<li><b>\" \" (ASCII 32 (0x20)),</b> սովորական բացատ։</li>\r\n	<li><b>\"\\t\" (ASCII 9 (0x09)),</b> տաբուլացիայի սիմվոլ։</li>\r\n	<li><b>\"\\n\" (ASCII 10 (0x0A)),</b> տողադարձի սիմվոլ։</li>\r\n	<li><b>\"\\0\" (ASCII 0 (0x00)),</b> NULL-բայթ։</li>\r\n	<li><b>\"\\v\" (ASCII 11 (0x0B)),</b> ուղղահայաց տաբուլացիա։</li>\r\n</ol>\r\n<p>string-ը կտրվող տող է (string): Վերադարձվող արժեք՝ կտրված տողը։</p>', 'Օրինակ 1.</p>\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>$hello  = \"Hello World\";</span>\r\n	<span>$trimmed = trim($hello, \"Hdle\");</span>\r\n	<span>var_dump($trimmed);</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>Արդյունք</p>\r\n\r\n<p class=\"span_left span_left_purple\">string(5) \"o Wor\"</p>\r\n\r\n<p>Օրինակ 2.</p>\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n	<span>$hello  = \"Hello World\";</span>\r\n	<span>$trimmed = trim($hello, \'HdWr\');</span>\r\n	<span>var_dump($trimmed);</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n\r\n<p>Արդյունք</p>\r\n\r\n<p class=\"span_left span_left_purple\">string(7) \"ello ol\"</p>', '#8e08ab'),
(27, 'explode', '<p>explode ֆունկցիան տողը բաժանում է մասերի տարանջատիչի միջոցով։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">explode ( string $separator , string $string , int $limit = PHP_INT_MAX ) : array</p>\r\n<p>Վերադառձնում է տողերի զանգված, string տողերը բաժանելուց հետո separator-ի միջոցով։</p>\r\n<p>separator-ը տարանջատիչ է, իսկ string-ը մուտքային տող:</p>\r\n<p>Եթե ​​պարամետր limit-ը դրական է, վերադարձվող զանգվածը ամենաշատը կպարունակի limit տարրերի քանակ, ընդորում վերջին տարրը պարունակում է string տողի մնացորդը։ Եթե ​​պարամետրը limit-ը բացասական է, ապա բոլոր բաղադրիչները կվերադարձվեն, բացառությամբ վերջին limit-ի: Եթե limit-ը հավասար է զրոյի, ապա այն գնահատվում է 1:</p>', '\r\n<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$pizza  = \"կտոր1 կտոր2 կտոր3 կտոր4 կտոր5 կտոր6\";</span>\r\n<span>$pieces = explode(\" \", $pizza);</span>\r\n<span>echo $pieces[0]; // կտոր1</span>\r\n<span>echo $pieces[1]; // կտոր2</span>\r\n	<span class=\"last_span\">?&gt;</span>\r\n</p>', '#8e08ab'),
(28, 'strpos', '\r\n<p>strpos ֆունկցիան վերադարձնում է դիրքը առաջինը մուտք գործող ենթատողի։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	strpos ( string $haystack , string $needle , int $offset = 0 ) : int|false\r\n</p>\r\n<p>Փնտրում է առաջին մուտք գործող needle ենթատողի դիրքը haystack տողում։</p>\r\n<p>haystack տողում կատարվում է որոնումը։</p>\r\n<p>Եթե needle պարամետրը տող չէ, ապա նա ձևափոխվում է ամբողջ թվի և արտահայտվում է ինչպես կոդի սիմվոլ։</p>\r\n<p>եթե offset պարամետրը նշված է, ապա որոնումը կսկսի նշված սիմվոլների քանակով՝ տողի սկզբից։</p>', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$newstring = \'abcdef abcdef\';</span>\r\n<span>$pos = strpos($newstring, \'a\', 1); // $pos = 7, ոչ 0</span>\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n', '#8e08ab'),
(29, 'sort', '<p>sort ֆունկցիան տեսակավորում է զանգվածը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	sort ( array &$array , int $flags = SORT_REGULAR ) : bool\r\n</p>\r\n<p>Ֆունկցիան ավարտելուց հետո զանգվածի տարրերը կդասավորվեն ըստ աճման կարգի։</p>\r\n<p>array-ը մուտքային զանգված է, իսկ ոչ պարտադիր երկրորդ պարամետր flags-ը փոխում է տեսակավորման վարքագիծը  հաջորդ արժեքների համար։\r\n</p>\r\n<p>flags տիպի տեսակավորումները լինում են՝ SORT_REGULAR, SORT_NUMERIC, SORT_STRING, SORT_LOCALE_STRING, SORT_NATURAL, SORT_FLAG_CASE,</p>\r\n<p>Վերադարձնում է true հաջող ավարտի դեպքում կամ false սխալի առաջացման դեպքում։</p>\r\n', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$fruits = array(\"lemon\", \"orange\", \"banana\", \"apple\");</span>\r\n<span>sort($fruits);</span>\r\n<span>foreach ($fruits as $key => $val) {</span>\r\n<span><span>echo \"fruits[\" . $key . \"] = \" . $val . \"\\n\";</span></span>\r\n<span>}</span>\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n\r\n<p>Արդյունք</p>\r\n<p class=\"span_left span_left_purple\">\r\n<span class=\"last_span\">fruits[0] = apple</span>\r\n<span class=\"last_span\">fruits[1] = banana</span>\r\n<span class=\"last_span\">fruits[2] = lemon</span>\r\n<span class=\"last_span\">fruits[3] = orange</span>\r\n</p>', '#8e08ab'),
(30, 'array', '<p>array  ֆունկցիան ստեղծում է զանգված։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	array ( mixed ...$values ) : array\r\n</p>\r\n<p>\"index => values\" առանձնացված ստորակետերով, սահմանում է ինդեքսները և դրանց արժեքները: Ինդեքսը կարող է լինել տող կամ ամբողջ թիվ: Եթե ինդեքսը թիվ է, հաջորդ գեներացվող ինդեքսը կլինի թիվ, որը հավասար է առավելագույն թվային ինդեքսին + 1։ </p>\r\n<p>Նշեք, որ եթե որոշված են երկու նույն ինդեքսներ, նման դեպքում կգրանցվի վերջի գրվածը։Վերադարձնում է պարամետրերի զանգվածը: Պարամետրերը կարող են ինդեքսավորվել՝ օգտագործելով => օպերատորը:</p>', '<p class=\"span_left_purple span_left\">\r\n	&lt;?php\r\n<span>$array = array(1, 1, 1, 1,  1, 8 => 1,  4 => 1, 19, 3 => 13);</span>\r\n<span>print_r($array);</span>\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>Արդյունք</p>\r\n<p class=\"span_left span_left_purple\">\r\n	Array\r\n<span class=\"last_span\">(</span>\r\n   <span>[0] => 1</span>\r\n   <span>[1] => 1</span>\r\n   <span>[2] => 1</span>\r\n   <span>[3] => 13</span>\r\n   <span>[4] => 1</span>\r\n   <span>[8] => 1</span>\r\n   <span>[9] => 19</span>\r\n<span class=\"last_span\">)</span>\r\n</p>', '#8e08ab'),
(31, 'array_push', '<p>array_push ֆունկցիան զանգվածի վերջում ավելացնում է մեկ կամ մի քանի տարր։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	array_push ( array &$array , mixed ...$values ) : int\r\n</p>\r\n<p>\r\narray_push() ֆունկցիան օգտագործում է array-ին որպես ստեկ և ավելացնում է փոխանցված արժեքները array զանգվածի վերջում։ array-ի երկարությունը մեծանում է փոխանցված արժեքների քանակով։ \r\n<p>array-մուտքային զանգված, values-արժեք, որը ավելանում է array զանգվածի վերջում։\r\n</p>\r\n<p>Վերադարձում է մուտքագրված էլեմենտերի քանակը։</p>', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$stack = array(\"orange\", \"banana\");</span>\r\n<span>array_push($stack, \"apple\", \"raspberry\");</span>\r\n<span>print_r($stack);</span>\r\n<span class=\"last_span\">?&gt;</span>	\r\n</p>\r\n<p>Արդյունք</p>\r\n<p class=\"span_left span_left_purple\">\r\n	Array\r\n<span class=\"last_span\"> (</span>\r\n    <span>[0] => orange</span>\r\n    <span>[1] => banana</span>\r\n    <span>[2] => apple</span>\r\n    <span>[3] => raspberry</span>\r\n<span class=\"last_span\"> )</span>\r\n</p>', '#8e08ab'),
(32, 'array_pop', '<p>array_pop ֆունկցիան հանում է զանգվածի վերջին տարրը։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\narray_pop ( array &$array ) : mixed\r\n</p>\r\n<p>array_pop() հանում և վերադարձնում է array զանգվածի վերջին տարրի արժեքը, փոքրացնելով array զանգվածի չափը մեկ տարրով։</p>\r\n<p>array զանգված, որից վերցվում է արժեքները։ Եթե զանգվածը դատարկ է, ապա վերադարձվող արժեքը կլինի null։</p>', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\");</span>\r\n<span>$fruit = array_pop($stack);</span>\r\n<span>print_r($stack);</span>\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n\r\n<p>Արդյունք</p>\r\n<p class=\"span_left span_left_purple\">\r\n	Array\r\n<span class=\"last_span\">(</span>\r\n    <span>[0] => orange</span>\r\n    <span>[1] => banana</span>\r\n    <span>[2] => apple</span>\r\n<span class=\"last_span\">)</span>\r\n</p>', '#8e08ab'),
(33, 'array_reverse', '<p>array_reverse ֆունկցիան վերադարձնում է զանգված տարրերի հակառակ հերթականությամբ։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">\r\n	array_reverse ( array $array , bool $preserve_keys = false ) : array\r\n</p>\r\n<p>array մուտքային զանգված:</p>\r\n<p> preserve_keys եթե ​​դրված է true, ապա թվային բանալիները կպահպանվեն:</p>', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$input  = array(\"php\", 4.0, array(\"green\", \"red\"));</span>\r\n<span>$reversed = array_reverse($input);</span>\r\n<span>print_r($reversed);</span>\r\n\r\n<span class=\"last_span\">?&gt;</span>\r\n	</p>\r\n<p>Արդյունք</p>\r\n<p class=\"span_left span_left_purple\">Array\r\n<span class=\"last_span\">(</span>\r\n    <span>[0] => Array</span>\r\n        <span class=\"last_span\"><span>(</span></span>\r\n            <span><span>[0] => green</span></span>\r\n            <span><span>[1] => red</span></span>\r\n       <span class=\"last_span\"><span>)</span></span>\r\n\r\n    <span>[1] => 4</span>\r\n    <span>[2] => php</span>\r\n<span class=\"last_span\">)</span>\r\n</p>', '#8e08ab'),
(34, 'array_shift', '<p>array_shift ֆունկցիան հանում է զանգվածի առաջին տարրը։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">   \r\narray_shift ( array &$array ) : mixed\r\n</p>\r\n<p>array_shift() ֆունկցիան հանում է array զանգվածի առաջին տարրը և վերադարձում է այն, կրճատելով զանգվածը մեկ տարրով։ Բոլոր թվային բանալիները կփոխվեն այնպես, որ զանգվածի համարակալումը սկսվի զրոյից, իսկ տողայի բանալիները կմնան նունյը։</p>\r\n<p>array-մուտքային զանգված։ </p>\r\n<p>Վերադարձնում է հանված տարրը կամ null, եթե զանգվածը դատարկ է կամ զանգված չի համարվում։</p>', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$stack = array(\"orange\", \"banana\", \"apple\", \"raspberry\");</span>\r\n<span>$fruit = array_shift($stack);</span>\r\n<span>print_r($stack);</span>\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>Արդյունք</p>\r\n<p class=\"span_left span_left_purple\">\r\n	Array\r\n<span class=\"last_span\">(</span>\r\n    <span>[0] => banana</span>\r\n    <span>[1] => apple</span>\r\n    <span>[2] => raspberry</span>\r\n<span class=\"last_span\">)</span>\r\n</p>', '#8e08ab'),
(35, 'array_sum', '<p>array_sum ֆունկցիան վերադարձնում է զանգվածի արժեքների գումարը: Այն ունի հետևյալ շարահյուսությունը:</p>\r\n<p class=\"span_left span_left_purple\">\r\n	array_sum ( array $array ) : int | float\r\n</p>\r\n<p>array մուտքային զանգված։</p><p> Վերադարձնում է արժեքների գումարը որպես ամբողջ թիվ կամ սահող ստորակետով թիվ, կամ 0,եթե զանգվածը դատարկ է:</p>\r\n', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n<span>$a = array(2, 4, 6, 8);</span>\r\n<span>echo \"sum(a) = \" . array_sum($a) . \"\\n\";</span>\r\n\r\n<span>$b = array(\"a\" => 1.2, \"b\" => 2.3, \"c\" => 3.4);</span>\r\n<span>echo \"sum(b) = \" . array_sum($b) . \"\\n\";</span>\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>Արդյունք</p>\r\n<p class=\"span_left_purple span_left\">sum(a) = 20\r\n<span class=\"last_span\">sum(b) = 6.9</span></p>\r\n', '#8e08ab'),
(37, 'isset ', '<p>isset ֆունկցիան որոշում է, թե արդյոք փոփոխականը տեղադրվել է, բացառելով null արժեքը։ Այն ունի հետևյալ շարահյուսությունը:</p>\r\n<p class=\"span_left span_left_purple\">isset ( mixed $var , mixed ...$vars ) : bool\r\n</p>\r\n<p>Եթե ​​փոփոխականը հանվել է unset()- ի միջոցով, ապա այն այլևս չի համարվում տեղադրված:isset() կվերադարձնի false փոփոխականի ստուգման ժամանակ որը ներմուշված է որպես null։Եթե ​​ներմուծված են մի քանի պարամետրեր, ապա Isset-ը() կվերադարձնի true  այն դեպքում,երբ բոլոր պարամետրերը որոշված կլինեն:</p>\r\n<p>var ստոգվող փոփոխական<br>\r\nvars հաջորդ փոփոխական։</p>\r\n<p>Վերադարձնում է true, եթե var որոշված է և իր արժեքը հավասար չէ null, հակառակ դեպքում վերադարձնում է false։</p>', '<p class=\"span_left span_left_purple\">\r\n	&lt;?php\r\n\r\n<span>$var = \"\";</span>\r\n\r\n<span>// ստուգումը կվերադարձնի TRUE, այդ իսկ պատճառով տեքստը կտպվի։</span>\r\n<span>if (isset($var)) {</span>\r\n<span class=\"last_span\"><span>echo \" Այս փոփոխականը որոշված է\";</span></span>\r\n<span>}</span>\r\n<span class=\"last_span\">?&gt;</span></p>', '#8e08ab'),
(39, 'gettype', '<p>gettype ֆունկցիան վերադարձնում է փոփոխականի տեսակը։ Այն ունի հետևյալ շարահյուսությունը։</p>\r\n<p class=\"span_left span_left_purple\">gettype ( mixed $value ) : string</p>\r\n<p>Վերադարձնում է տեսակը PHP-ի value փոփոխականով: Փոփոխականի տեսակի ստուգման համար օգտագործվում է is_* ֆունկցիան:</p>\r\n<p>value ստուգվող փոփոխական։</p>\r\n<p>Վերադարձված տողի հնարավոր արժեքներն են.</p>\r\n<ol class=\"php_mysql_content\">\r\n	<li>\"boolean\"</li>\r\n	<li>\"integer\"</li>\r\n	<li>\"double\"</li>\r\n	<li>\"string\"</li>\r\n	<li>\"array\"</li>\r\n	<li>\"object\"</li>\r\n	<li>\"resource\"</li>\r\n	<li>\"resource (closed)\" с PHP 7.2.0</li>\r\n	<li>\"NULL\"</li>\r\n	<li>\"unknown type\"</li>\r\n</ol>', '<p class=\"span_left span_left_purple\">	\r\n	&lt;?php\r\n\r\n<span>$data = array(1, 1., NULL, new stdClass, \'foo\');</span>\r\n\r\n<span>foreach ($data as $value) {</span>\r\n<span class=\"last_span\"><span> echo gettype($value), \"\\n\";</span></span>\r\n<span>}</span>\r\n\r\n<span class=\"last_span\">?&gt;</span>\r\n</p>\r\n<p>Արդյուք</p>\r\n<p class=\"span_left span_left_purple\">\r\n	<span>integer</span>\r\n<span>double</span>\r\n<span>NULL</span>\r\n<span>object</span>\r\n<span>string</span>\r\n</p>', '#8e08ab');

-- --------------------------------------------------------

--
-- Структура таблицы `users`
--

CREATE TABLE `users` (
  `id` int(11) NOT NULL,
  `anun` varchar(30) NOT NULL,
  `azganun` varchar(30) NOT NULL,
  `email` varchar(55) NOT NULL,
  `pass` text NOT NULL,
  `type` varchar(255) NOT NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;

--
-- Дамп данных таблицы `users`
--

INSERT INTO `users` (`id`, `anun`, `azganun`, `email`, `pass`, `type`) VALUES
(47, 'Սոնա', 'Գրիգորյան', 'admin@mail.ru', '00000000', 'admin'),
(55, 'Սոնա', 'Գրիգորյան', 'grigoryanson99@gmail.com', '11111111', '');

--
-- Индексы сохранённых таблиц
--

--
-- Индексы таблицы `harcer`
--
ALTER TABLE `harcer`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `mysql_function`
--
ALTER TABLE `mysql_function`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `patasxanner`
--
ALTER TABLE `patasxanner`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `php_teg`
--
ALTER TABLE `php_teg`
  ADD PRIMARY KEY (`id`);

--
-- Индексы таблицы `users`
--
ALTER TABLE `users`
  ADD PRIMARY KEY (`id`);

--
-- AUTO_INCREMENT для сохранённых таблиц
--

--
-- AUTO_INCREMENT для таблицы `harcer`
--
ALTER TABLE `harcer`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=12;

--
-- AUTO_INCREMENT для таблицы `mysql_function`
--
ALTER TABLE `mysql_function`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=22;

--
-- AUTO_INCREMENT для таблицы `patasxanner`
--
ALTER TABLE `patasxanner`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=11;

--
-- AUTO_INCREMENT для таблицы `php_teg`
--
ALTER TABLE `php_teg`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=56;

--
-- AUTO_INCREMENT для таблицы `users`
--
ALTER TABLE `users`
  MODIFY `id` int(11) NOT NULL AUTO_INCREMENT, AUTO_INCREMENT=56;
COMMIT;

/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
